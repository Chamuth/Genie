<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
using System.Collections.Generic;
using System.Data;
using System.Linq;
using <#=GenerationContext.BaseNamespace#>.Dapper;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Interfaces;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Filters.Abstract;

namespace <#=GenerationContext.BaseNamespace#>.Infrastructure
{
    public class ReadOnlyRepository<T> : IReadOnlyRepository<T>
        where T : class
    {
        public IDbConnection Conn { get; }
        public IDapperContext Context { get;}

        public ReadOnlyRepository(IDapperContext context)
        {
            Context = context;
            Conn = Context.Connection;
        }

        [System.Obsolete("GetAll is deprecated, please use Get instead.")]
        public virtual IEnumerable<T> GetAll(IDbTransaction transaction = null, int? commandTimeout = null)
        {
            return Conn.GetAll<T>(transaction: transaction, commandTimeout: commandTimeout).ToList();
        }
        
        [System.Obsolete("GetBy is deprecated, please use Get instead.")]
        public virtual IEnumerable<T> GetBy(object where = null, object order = null, int? pageSize = null, int? page = null, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            return Conn.GetBy<T>(where: where, order: order, pageSize: pageSize, page: page,  transaction: transaction, commandTimeout: commandTimeout).ToList();
        }

        public virtual IEnumerable<T> Get(IRepoQuery query)
        {
            return Conn.Get<T>(query).ToList();
        }

        public virtual int Count(IRepoQuery query)
        {
            return Conn.Count(query);
        }
    }
}
