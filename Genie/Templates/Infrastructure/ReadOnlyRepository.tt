<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
using System.Collections.Generic;
using System.Data;
using System.Linq;
using <#=GenerationContext.BaseNamespace#>.Dapper;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Interfaces;

namespace <#=GenerationContext.BaseNamespace#>.Infrastructure
{
    public class ReadOnlyRepository<T> : IReadOnlyRepository<T>
        where T : class
    {
        public IDbConnection Conn { get; }
        public IDapperContext Context { get;}

        public ReadOnlyRepository(IDapperContext context)
        {
            Context = context;
            Conn = Context.Connection;
        }

        [System.Obsolete("GetAll is deprecated, please use Get instead.")]
        public virtual IEnumerable<T> GetAll(IDbTransaction transaction = null, int? commandTimeout = null)
        {
            return Conn.GetAll<T>(transaction: transaction, commandTimeout: commandTimeout).ToList();
        }
        
        [System.Obsolete("GetBy is deprecated, please use Get instead.")]
        public virtual IEnumerable<T> GetBy(object where = null, object order = null, int? pageSize = null, int? page = null, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            return Conn.GetBy<T>(where: where, order: order, pageSize: pageSize, page: page,  transaction: transaction, commandTimeout: commandTimeout).ToList();
        }

        
        internal virtual IEnumerable<T> Get(string targetName, Queue<string> where, Queue<string> order, int? pageSize = null, int? page = null, int? limit = null, int? skip = null, int? take = null, IDbTransaction transaction = null)
        {
            return Conn.Get<T>(targetName, where, order,  pageSize, page, limit, skip, take, transaction).ToList();
        }

        internal virtual int Count(string targetName, Queue<string> where, Queue<string> order, int? pageSize = null, int? page = null, int? limit = null, int? skip = null, int? take = null, IDbTransaction transaction = null)
        {
            return Conn.Count(targetName, where, order, pageSize, page, limit, skip, take, transaction);
        }
    }
}
