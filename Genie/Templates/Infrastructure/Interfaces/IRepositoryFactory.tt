<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>

using <#=GenerationContext.BaseNamespace#>.Infrastructure.Models;

namespace <#=GenerationContext.BaseNamespace#>.Infrastructure.Interfaces
{
	/// <summary>
    /// Factory for creating repositories 
    /// </summary>
	public interface IRepositoryFactory
    {
        /// <summary>
        /// Creates a normal repository
        /// </summary>
        /// <typeparam name="T">Type of the repository</typeparam>
        /// <param name="context">Content of the repository</param>
        /// <param name="unit">Unit of work of the repository</param>
        /// <returns>A new repository</returns>
        IRepository<T> CreateRepository<T>(IDapperContext context, UnitOfWork unit) where T : BaseModel;

        /// <summary>
        /// Creates a read only repository
        /// </summary>
        /// <typeparam name="T">Type of the repository</typeparam>
        /// <param name="context">Context that the repository is created</param>
        /// <returns>A new repository</returns>
        IViewRepository<T> CreateReadOnlyRepository<T>(IDapperContext context) where T : class;
    }
}
    