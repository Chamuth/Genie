<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
using System.Collections.Generic;
using System.Data;
using <#=GenerationContext.BaseNamespace#>.Dapper;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Models;

namespace <#=GenerationContext.BaseNamespace#>.Infrastructure.Interfaces
{
	public interface IRepository<T>
        where T : BaseModel
    {
        IDbConnection Conn { get; }
        IDapperContext Context { get; }


        void Add(T entity, IDbTransaction transaction = null, int? commandTimeout = null);
        void Update(T entity, IDbTransaction transaction = null, int? commandTimeout = null);
        void Remove(T entity, IDbTransaction transaction = null, int? commandTimeout = null);

        T GetByKey(object key, IDbTransaction transaction = null, int? commandTimeout = null);

        IEnumerable<T> GetAll(IDbTransaction transaction = null, int? commandTimeout = null);
        IEnumerable<T> GetBy(object where = null, object order = null, IDbTransaction transaction = null, int? commandTimeout = null);
    }
}
