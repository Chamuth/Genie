<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
<#@ import namespace="Genie.Extensions"#>
using System;
using System.Data;
using System.Linq;
using System.Collections.Generic;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Repositories;
using <#=GenerationContext.BaseNamespace#>.Dapper;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Interfaces;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Filters;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Models.Abstract;

<#var entity = _relation;
var name = _relation.Name;
#>
namespace <#=GenerationContext.BaseNamespace#>.Infrastructure.Models
{

    namespace Abstract
    {
        
	    public interface I<#=name#>QueryContext
	    {
            I<#=name#>QueryContext Top(int limit);
            I<#=name#>QueryContext Skip(int skip);
            I<#=name#>QueryContext Take(int take);
		    I<#=name#>FilterContext Where { get; }
		    I<#=name#>OrderContext OrderBy { get; }
	        IEnumerable<<#=name#>> Query(IDbTransaction transaction = null);
	        int Count(IDbTransaction transaction = null);
	    }

	    public interface I<#=name#>FilterContext
	    {
<#foreach(var atd in entity.Attributes){#>
<#if(atd.DataType == "string"){#>
		    StringFilter<I<#=name#>FilterContext,I<#=name#>QueryContext> <#=atd.Name#> { get; }
<#} else if(atd.DataType == "int" || atd.DataType == "int?" || atd.DataType == "double" || atd.DataType == "double?" || atd.DataType == "decimal" || atd.DataType == "decimal?" || atd.DataType == "long" || atd.DataType == "long?" ){#>
		    NumberFilter<I<#=name#>FilterContext,I<#=name#>QueryContext> <#=atd.Name#> { get; }
<#}else if(atd.DataType == "DateTime" || atd.DataType == "DateTime?"){#>
		    DateFilter<I<#=name#>FilterContext,I<#=name#>QueryContext> <#=atd.Name#> { get; }
<#}else if(atd.DataType == "bool" || atd.DataType == "bool?"){#>
		    BoolFilter<I<#=name#>FilterContext,I<#=name#>QueryContext> <#=atd.Name#> { get; }
<#}#>
<#}#>
	    }

        public interface I<#=name#>OrderContext
        {
<#foreach(var atd in entity.Attributes){#>
		    OrderElement<I<#=name#>OrderContext,I<#=name#>QueryContext> <#=atd.Name#> { get; }
<#}#>
        }
    }
    
    namespace Concrete
    {
        [Table("[dbo].[<#=name#>]")]
        public class <#=name#> : BaseModel
        {
<#foreach(var atd in entity.Attributes){#>
		    private <#=atd.DataType#> <#=atd.FieldName#>;
<#}#>

<#foreach(var atd in
 entity.ForeignKeyAttributes){#>
		    private <#=atd.ReferencingRelationName#> <#=atd.ReferencingNonForeignKeyAttribute.FieldName#>Obj;
<#}#>

<#foreach(var atd in entity.Attributes){#>
<#	if(atd.IsKey) {#>
		    [Key]
<#	}#>
		    public <#=atd.DataType#> <#=atd.Name#> { get { return <#=atd.FieldName#>; } set { if(<#=atd.FieldName#> == value ) { return; }  <#=atd.FieldName#> = value; __Updated("<#=atd.Name#>"); <#=atd.RefPropName != null ? atd.RefPropName + " = null;" : ""#> } }
<#}#>

<#foreach(var atd in entity.ForeignKeyAttributes){#>
		    public <#=atd.ReferencingRelationName#> Get<#=atd.ReferencingNonForeignKeyAttribute.Name#>(IDbTransaction transaction =null)
            {
                return DatabaseUnitOfWork != null ? <#=atd.ReferencingNonForeignKeyAttribute.FieldName#>Obj ?? (<#=atd.ReferencingNonForeignKeyAttribute.FieldName#>Obj = DatabaseUnitOfWork.<#=atd.ReferencingRelationName#>Repository.Get().Where.<#=atd.ReferencingTableColumnName#>.Equals(<#=atd.ReferencingNonForeignKeyAttribute.FieldName#><#=atd.ReferencingNonForeignKeyAttribute.DataType.EndsWith("?") ?  ".GetValueOrDefault()" : ""#>).Filter().Top(1).Query(transaction).FirstOrDefault()) : null;
            }
<#}#>

<#foreach(var list in entity.ReferenceLists){#>
		    public IEnumerable<<#=list.ReferncedRelationName#>> <#=list.ReferncedRelationName.ToPlural()#>WhereThisIs<#=list.ReferencedPropertyName#>(IDbTransaction transaction = null ){ return DatabaseUnitOfWork.<#=list.ReferncedRelationName#>Repository.Get().Where.<#=list.ReferencedPropertyName#>.Equals(<#=list.ReferencedPropertyOnThisRelation#>).Filter().Query(transaction); }
<#}#>
        }

	    internal class <#=name#>QueryContext I<#=name#>QueryContext
	    {
		    private <#=name#>FilterContext _where; 
	        private <#=name#>OrderContext _order;
		    private readonly <#=name#>Repository _repo;

            private int? _page;
            private int? _pageSize;
            private int? _limit;
            private int? _skip;
            private int? _take;

            public <#=name#>QueryContext Page(int pageSize, int page)
            {
                _page = page;
                _pageSize = pageSize;
                return this;
            }

            public <#=name#>QueryContext Top(int limit)
            {
                _limit = limit;
                return this;
            }

            public <#=name#>QueryContext Skip(int skip)
            {
                _skip = skip;
                return this;
            }

            public <#=name#>QueryContext Take(int take)
            {
                _take = take;
                return this;
            }
		
		    internal <#=name#>QueryContext(<#=name#>Repository repo) { _repo = repo; }
		
		    public <#=name#>FilterContext Where { get { return _where ?? (_where = new <#=name#>FilterContext(this)); }}
        
		    public <#=name#>OrderContext OrderBy { get { return _order ?? (_order = new <#=name#>OrderContext(this)); } }

	        public IEnumerable<<#=name#>> Query(IDbTransaction transaction = null)
	        {
	            return _repo.Get("[dbo].[<#=name#>]", _where?.GetFilterExpressions(), _order?.GetOrderExpressions(), _pageSize, _page, _limit, _skip, _take, transaction);
	        }

	        public int Count(IDbTransaction transaction = null)
	        {
	            return _repo.Count("[dbo].[<#=name#>]", _where?.GetFilterExpressions(), _order?.GetOrderExpressions(), _pageSize, _page, _limit, _skip, _take, transaction);
	        }
	    }

	    internal class <#=name#>FilterContext : BaseFilterContext, I<#=name#>FilterContext 
	    {
		    private readonly <#=name#>QueryContext  _queryContext;
		    internal <#=name#>FilterContext(<#=name#>QueryContext context) { _queryContext = context; }

<#foreach(var atd in entity.Attributes){#>
<#if(atd.DataType == "string"){#>
		    private StringFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.FieldName#>;
		    public StringFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new StringFilter<<#=name#>FilterContext,<#=name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#} else if(atd.DataType == "int" || atd.DataType == "int?" || atd.DataType == "double" || atd.DataType == "double?" || atd.DataType == "decimal" || atd.DataType == "decimal?" || atd.DataType == "long" || atd.DataType == "long?" ){#>
		    private NumberFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.FieldName#>;
		    public NumberFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new NumberFilter<<#=name#>FilterContext,<#=name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#}else if(atd.DataType == "DateTime" || atd.DataType == "DateTime?"){#>
    	    private DateFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.FieldName#>;
		    public DateFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new DateFilter<<#=name#>FilterContext,<#=name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#}else if(atd.DataType == "bool" || atd.DataType == "bool?"){#>
    	    private BoolFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.FieldName#>;
		    public BoolFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new BoolFilter<<#=name#>FilterContext,<#=name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#}#>
<#}#>
	    }

        public class  <#=name#>OrderContext : BaseOrderContext, I<#=name#>OrderContext
        {
		    private readonly <#=name#>QueryContext  _queryContext;
		    internal <#=name#>OrderContext(<#=name#>QueryContext context) { _queryContext = context; }

<#foreach(var atd in entity.Attributes){#>
            private OrderElement<<#=name#>OrderContext,<#=name#>QueryContext> <#=atd.FieldName#>;
		    public OrderElement<<#=name#>OrderContext,<#=name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new OrderElement<<#=name#>OrderContext,<#=name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#}#>
        }
    }
}
