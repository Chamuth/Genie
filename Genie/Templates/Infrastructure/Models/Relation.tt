<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
<#@ import namespace="Genie.Extensions"#>
using System;
using System.Data;
using System.Linq;
using System.Collections.Generic;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Repositories;
using <#=GenerationContext.BaseNamespace#>.Dapper;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Interfaces;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Filters;

<#var entity = _relation;
var name = _relation.Name;
#>
namespace <#=GenerationContext.BaseNamespace#>.Infrastructure.Models
{
    [Table("[dbo].[<#=name#>]")]
    public class <#=name#> : BaseModel
    {
<#foreach(var atd in entity.Attributes){#>
		private <#=atd.DataType#> <#=atd.FieldName#>;
<#}#>

<#foreach(var atd in
 entity.ForeignKeyAttributes){#>
		private <#=atd.ReferencingRelationName#> <#=atd.ReferencingNonForeignKeyAttribute.FieldName#>Obj;
<#}#>

<#foreach(var atd in entity.Attributes){#>
<#	if(atd.IsKey) {#>
		[Key]
<#	}#>
		public <#=atd.DataType#> <#=atd.Name#> { get { return <#=atd.FieldName#>; } set { if(<#=atd.FieldName#> == value ) { return; }  <#=atd.FieldName#> = value; __Updated("<#=atd.Name#>"); <#=atd.RefPropName != null ? atd.RefPropName + " = null;" : ""#> } }
<#}#>

<#foreach(var atd in entity.ForeignKeyAttributes){#>
		public <#=atd.ReferencingRelationName#> Get<#=atd.ReferencingNonForeignKeyAttribute.Name#>(IDbTransaction transaction =null)
        {
            return DatabaseUnitOfWork != null ? <#=atd.ReferencingNonForeignKeyAttribute.FieldName#>Obj ?? (<#=atd.ReferencingNonForeignKeyAttribute.FieldName#>Obj = DatabaseUnitOfWork.<#=atd.ReferencingRelationName#>Repository.Get().Where.<#=atd.ReferencingTableColumnName#>.Equals(<#=atd.ReferencingNonForeignKeyAttribute.FieldName#><#=atd.ReferencingNonForeignKeyAttribute.DataType.EndsWith("?") ?  ".GetValueOrDefault()" : ""#>).Filter().Top(1).Query(transaction).FirstOrDefault()) : null;
        }
<#}#>

<#foreach(var list in entity.ReferenceLists){#>
		public IEnumerable<<#=list.ReferncedRelationName#>> <#=list.ReferncedRelationName.ToPlural()#>WhereThisIs<#=list.ReferencedPropertyName#>(IDbTransaction transaction = null ){ return DatabaseUnitOfWork.<#=list.ReferncedRelationName#>Repository.Get().Where.<#=list.ReferencedPropertyName#>.Equals(<#=list.ReferencedPropertyOnThisRelation#>).Filter().Query(transaction); }
<#}#>
    }

	public class <#=name#>QueryContext : BaseQueryContext<<#=name#>QueryContext>
	{
		private <#=name#>FilterContext _where; 
	    private <#=name#>OrderContext _order;
		private readonly <#=name#>Repository _repo;
		
		internal <#=name#>QueryContext(<#=name#>Repository repo) { _repo = repo; }
		
		public <#=name#>FilterContext Where { get { return _where ?? (_where = new <#=name#>FilterContext(this)); }}
        
		public <#=name#>OrderContext OrderBy { get { return _order ?? (_order = new <#=name#>OrderContext(this)); } }

	    public IEnumerable<<#=name#>> Query(IDbTransaction transaction = null)
	    {
	        return _repo.Get("[dbo].[<#=name#>]", _where?.GetFilterExpressions(), _order?.GetOrderExpressions(), _pageSize, _page, _limit, _skip, _take, transaction);
	    }
	}

	public class <#=name#>FilterContext : BaseFilterContext
	{
		private readonly <#=name#>QueryContext  _queryContext;
		internal <#=name#>FilterContext(<#=name#>QueryContext context) { _queryContext = context; }

<#foreach(var atd in entity.Attributes){#>
<#if(atd.DataType == "string"){#>
		private StringFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.FieldName#>;
		public StringFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new StringFilter<<#=name#>FilterContext,<#=name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#} else if(atd.DataType == "int" || atd.DataType == "int?" || atd.DataType == "double" || atd.DataType == "double?" || atd.DataType == "decimal" || atd.DataType == "decimal?" || atd.DataType == "long" || atd.DataType == "long?" ){#>
		private NumberFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.FieldName#>;
		public NumberFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new NumberFilter<<#=name#>FilterContext,<#=name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#}else if(atd.DataType == "DateTime" || atd.DataType == "DateTime?"){#>
    	private DateFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.FieldName#>;
		public DateFilter<<#=name#>FilterContext,<#=name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new DateFilter<<#=name#>FilterContext,<#=name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#}#>
<#}#>
	}

    public class  <#=name#>OrderContext : BaseOrderContext
    {
		private readonly <#=name#>QueryContext  _queryContext;
		internal <#=name#>OrderContext(<#=name#>QueryContext context) { _queryContext = context; }

<#foreach(var atd in entity.Attributes){#>
        private OrderElement<<#=name#>OrderContext,<#=name#>QueryContext> <#=atd.FieldName#>;
		public OrderElement<<#=name#>OrderContext,<#=name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new OrderElement<<#=name#>OrderContext,<#=name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#}#>
    }
}
