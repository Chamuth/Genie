<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
using System;
using System.Collections.Generic;
using System.Data;
using Indico.DataAccess.Dapper;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Repositories;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Filters;

<#var entity = _view;#>
namespace <#=GenerationContext.BaseNamespace#>.Infrastructure.Models
{
    [Table("[dbo].[<#=entity.Name#>]")]
    public class <#=entity.Name#> 
    {
<#foreach(var atd in entity.Attributes){#>
		public <#=atd.DataType#> <#=atd.Name#> { get; set; } 
<#}#>
    }

    public class <#=entity.Name#>QueryContext 
	{
		private <#=entity.Name#>FilterContext _where; 
	    private <#=entity.Name#>OrderContext _order;
		private readonly <#=entity.Name#>Repository _repo;
		internal <#=entity.Name#>QueryContext(<#=entity.Name#>Repository repo) { _repo = repo; }
		public <#=entity.Name#>FilterContext Where { get { return _where ?? (_where = new <#=entity.Name#>FilterContext(this)); }}
        public <#=entity.Name#>OrderContext OrderBy { get { return _order ?? (_order = new <#=entity.Name#>OrderContext(this)); } }
        private int? _page;
	    private int? _pageSize;
	    private int? _limit;
		private int? _skip;
		private int? _take;

        public <#=entity.Name#>QueryContext Page(int pageSize, int page)
        {
            _page = page;
            _pageSize = pageSize;
            return this;
        }

        public <#=entity.Name#>QueryContext Top(int limit)
        {
            _limit = limit;
            return this;
        }

		public <#=entity.Name#>QueryContext Skip(int skip)
	    {
	        _skip = skip;
	        return this;
	    }

	    public <#=entity.Name#>QueryContext Take(int take)
	    {
	        _take = take;
	        return this;
	    }

	    public IEnumerable<<#=entity.Name#>> Query(IDbTransaction transaction = null)
	    {
	        return _repo.Get("[dbo].[<#=entity.Name#>]", _where?.GetFilterExpressions(), _order?.GetOrderExpressions(), _pageSize, _page, _limit, _skip, _take, transaction);
	    }
	}

	public class <#=entity.Name#>FilterContext : BaseFilterContext
	{
		private readonly <#=entity.Name#>QueryContext  _queryContext;
		internal <#=entity.Name#>FilterContext(<#=entity.Name#>QueryContext context) { _queryContext = context; }
        
<#foreach(var atd in entity.Attributes){#>
<#if(atd.DataType == "string"){#>
		private StringFilter<<#=entity.Name#>FilterContext,<#=entity.Name#>QueryContext> <#=atd.FieldName#>;
		public StringFilter<<#=entity.Name#>FilterContext,<#=entity.Name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new StringFilter<<#=entity.Name#>FilterContext,<#=entity.Name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#} else if(atd.DataType == "int" || atd.DataType == "int?" || atd.DataType == "double" || atd.DataType == "double?" || atd.DataType == "decimal" || atd.DataType == "decimal?" || atd.DataType == "long" || atd.DataType == "long?" ){#>
		private NumberFilter<<#=entity.Name#>FilterContext,<#=entity.Name#>QueryContext> <#=atd.FieldName#>;
		public NumberFilter<<#=entity.Name#>FilterContext,<#=entity.Name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new NumberFilter<<#=entity.Name#>FilterContext,<#=entity.Name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#}else if(atd.DataType == "DateTime" || atd.DataType == "DateTime?"){#>
    	private DateFilter<<#=entity.Name#>FilterContext,<#=entity.Name#>QueryContext> <#=atd.FieldName#>;
		public DateFilter<<#=entity.Name#>FilterContext,<#=entity.Name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new DateFilter<<#=entity.Name#>FilterContext,<#=entity.Name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#}#>
<#}#>
    }

    public class  <#=entity.Name#>OrderContext : BaseOrderContext
    {
		private readonly <#=entity.Name#>QueryContext  _queryContext;
		internal <#=entity.Name#>OrderContext(<#=entity.Name#>QueryContext context) { _queryContext = context; }

<#foreach(var atd in entity.Attributes){#>
        private OrderElement<<#=entity.Name#>OrderContext,<#=entity.Name#>QueryContext> <#=atd.FieldName#>;
		public OrderElement<<#=entity.Name#>OrderContext,<#=entity.Name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new OrderElement<<#=entity.Name#>OrderContext,<#=entity.Name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#}#>
    }
}
