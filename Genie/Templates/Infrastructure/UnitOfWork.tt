<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using <#=GenerationContext.BaseNamespace#>.Dapper;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Interfaces;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Models;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Repositories.Abstract;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Repositories.Concrete;

namespace <#=GenerationContext.BaseNamespace#>.Infrastructure
{
    public class UnitOfWork : IUnitOfWork, IDisposable
    {
		private IProcedureContainer _procedureContainer;

        private readonly List<IOperation> _operations;
        private readonly HashSet<BaseModel> _objects;

        <#foreach(var relation in _schema.Relations){
      #>private I<#=relation.Name#>Repository <#=relation.FieldName#>Repository;
        <#}#>

        <#foreach(var view in _schema.Views){
      #>private I<#=view.Name#>Repository <#=view.FieldName#>Repository;
        <#}#>

		public IProcedureContainer Procedures { get { return _procedureContainer ?? ( _procedureContainer = new ProcedureContainer(Context)); } }

        private IDapperContext Context { get;}
        private IDbTransaction Transaction { get; set; }

        public UnitOfWork(IDapperContext context)
        {
            Context = context;
            _objects = new HashSet<BaseModel>();
            _operations = new List<IOperation>();
        }
            
            
        <#foreach(var relation in _schema.Relations){
      #>public I<#=relation.Name#>Repository <#=relation.Name#>Repository { get { return <#=relation.FieldName#>Repository ?? (<#=relation.FieldName#>Repository = new <#=relation.Name#>Repository(Context, this)); } }
        <#}#>

        <#foreach(var view in _schema.Views){
      #>public I<#=view.Name#>Repository <#=view.Name#>Repository { get { return <#=view.FieldName#>Repository ?? (<#=view.FieldName#>Repository = new <#=view.Name#>Repository(Context)); } }
        <#}#>
            
        public IDbTransaction BeginTransaction()
        {
            if (Transaction != null)
            {
                throw new NullReferenceException("Not finished previous transaction");
            }
            Transaction = Context.Connection.BeginTransaction();
            return Transaction;
        }

        public void Commit()
        {
            if (Transaction != null)
            {
                Transaction.Commit();
                Transaction.Dispose();
                Transaction = null;
            }

            var updated = _objects.Where(o => o.UpdatedProperties.Count > 0);
            _operations.AddRange(updated.Select(u => new Operation(OperationType.Update, u)));

            if (_operations.Count > 0)
            {
                var connection = Context.Connection;

                var toAdd = _operations.Where(o => o.Type == OperationType.Add).ToList();
                var toDelete = _operations.Where(o => o.Type == OperationType.Remove).ToList();
                var toUpdate = _operations.Where(o => o.Type == OperationType.Update).ToList();

                foreach (var operation in toAdd)
                {
                    var newId = connection.Insert(operation.Object);
                    operation.Object.SetId(newId);
                }
                    

                foreach (var operation in toUpdate)
                    connection.Update(operation.Object);

                foreach (var operation in toDelete)
                    connection.Delete(operation.Object);
            }
        }

        public void Dispose()
        {
            if (Transaction != null)
            {
                Transaction.Dispose();
            }
        }

        public void AddOp(IOperation operation)
        {
            _operations.Add(operation);
        }

        public void AddObj(BaseModel obj)
        {
            _objects.Add(obj);
        }
    }
}
