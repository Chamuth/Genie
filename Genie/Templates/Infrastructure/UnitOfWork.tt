<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
using System;
using System.Collections.Generic;
using System.Data;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Interfaces;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Repositories.Abstract;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Repositories.Concrete;

namespace <#=GenerationContext.BaseNamespace#>.Infrastructure
{
    public class UnitOfWork : IUnitOfWork, IDisposable
    {
		private IProcedureContainer _procedureContainer;

        <#foreach(var relation in _schema.Relations){
      #>private I<#=relation.Name#>Repository <#=relation.FieldName#>Repository;
        <#}#>

        <#foreach(var view in _schema.Views){
      #>private I<#=view.Name#>Repository <#=view.FieldName#>Repository;
        <#}#>

		public IProcedureContainer Procedures { get { return _procedureContainer ?? ( _procedureContainer = new ProcedureContainer(Context)); } }

        private IDapperContext Context { get;}
        private IDbTransaction Transaction { get; set; }

        public UnitOfWork(IDapperContext context, IRepositoryFactory factory)
        {
            Context = context;
            _factory = factory;
            _repositories = new Dictionary<Type, object>();
        }
            
            
        <#foreach(var relation in _schema.Relations){
      #>public I<#=relation.Name#>Repository <#=relation.Name#>Repository { get { return <#=relation.FieldName#>Repository ?? (<#=relation.FieldName#>Repository = new <#=relation.Name#>Repository(Context, this)); } }
        <#}#>

        <#foreach(var view in _schema.Views){
      #>public I<#=view.Name#>Repository <#=view.Name#>Repository { get { return <#=view.FieldName#>Repository ?? (<#=view.FieldName#>Repository = new <#=view.Name#>Repository(Context)); } }
        <#}#>
            
        public IDbTransaction BeginTransaction()
        {
            if (Transaction != null)
            {
                throw new NullReferenceException("Not finished previous transaction");
            }
            Transaction = Context.Connection.BeginTransaction();
            return Transaction;
        }

        public void Commit()
        {
            if (Transaction != null)
            {
                Transaction.Commit();
                Transaction.Dispose();
                Transaction = null;
            }
            else
            {
                throw new NullReferenceException("Tried commit not opened transaction");
            }
        }

        public void Dispose()
        {
            if (Transaction != null)
            {
                Transaction.Dispose();
            }
            if (Context != null)
            {
                Context.Dispose();
            }
        }
    }
}
