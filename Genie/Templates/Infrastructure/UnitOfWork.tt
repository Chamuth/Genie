<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using <#=GenerationContext.BaseNamespace#>.Dapper;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Interfaces;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Models;

namespace <#=GenerationContext.BaseNamespace#>.Infrastructure
{
    public class UnitOfWork : IUnitOfWork, IDisposable
    {
        private readonly Dictionary<Type, object> _repositories;
        private readonly IRepositoryFactory _factory;

        public IDapperContext Context { get;}
        public IDbTransaction Transaction { get; private set; }

        public UnitOfWork(IDapperContext context, IRepositoryFactory factory)
        {
            Context = context;
            _factory = factory;
            _repositories = new Dictionary<Type, object>();
        }
            
            
        <#foreach(var relation in _schema.Relations){
      #>public IRepository<<#=relation.Name#>> <#=relation.Name#>Repository { get { return GetRepository<<#=relation.Name#>>(); } }
        <#}#>

        <#foreach(var view in _schema.Views){
      #>public IViewRepository<<#=view.Name#>> <#=view.Name#>Repository { get { return GetReadonlyRepository<<#=view.Name#>>(); } }
        <#}#>

        <#foreach(var sp in _schema.Procedures){
      #>public List<T> <#=sp.Name#><T>(<#=sp.ParamString#>) { return Context.Connection.Query<T>("EXEC <#=sp.Name#> <#=sp.PassString#>").ToList(); }
        <#}#>
            
            
        public IRepository<TSet> GetRepository<TSet>() where TSet : BaseModel
        {
            if (_repositories.Keys.Contains(typeof(TSet)))
                return _repositories[typeof(TSet)] as IRepository<TSet>;

            var repository = _factory.CreateRepository<TSet>(Context, this);
            _repositories.Add(typeof(TSet), repository);

            return repository;
        }

        public IViewRepository<TSet> GetReadonlyRepository<TSet>() where TSet : class 
        {
            if (_repositories.Keys.Contains(typeof(TSet)))
                return _repositories[typeof(TSet)] as IViewRepository<TSet>;

            var repository = _factory.CreateReadOnlyRepository<TSet>(Context);
            _repositories.Add(typeof(TSet), repository);

            return repository;
        }

        public IDbTransaction BeginTransaction()
        {
            if (Transaction != null)
            {
                throw new NullReferenceException("Not finished previous transaction");
            }
            Transaction = Context.Connection.BeginTransaction();
            return Transaction;
        }

        public void Commit()
        {
            if (Transaction != null)
            {
                Transaction.Commit();
                Transaction.Dispose();
                Transaction = null;
            }
            else
            {
                throw new NullReferenceException("Tried commit not opened transaction");
            }
        }

        public void Dispose()
        {
            if (Transaction != null)
            {
                Transaction.Dispose();
            }
            if (Context != null)
            {
                Context.Dispose();
            }
        }
    }
}
