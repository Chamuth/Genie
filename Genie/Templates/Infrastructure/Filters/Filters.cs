// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Genie.Templates.Infrastructure.Filters
{
    using Genie.Base;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\Genie\Genie\Templates\Infrastructure\Filters\Filters.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class Filters : FiltersBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing ");
            
            #line 6 "D:\Projects\Genie\Genie\Templates\Infrastructure\Filters\Filters.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BaseNamespace));
            
            #line default
            #line hidden
            this.Write(".Infrastructure.Filters.Abstract;\r\n\r\nnamespace ");
            
            #line 8 "D:\Projects\Genie\Genie\Templates\Infrastructure\Filters\Filters.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BaseNamespace));
            
            #line default
            #line hidden
            this.Write(".Infrastructure.Filters\r\n{\r\n    namespace Abstract\r\n    {\r\n        #region Filter" +
                    "ing\r\n\r\n        public interface IFilterContext\r\n        {\r\n            Queue<str" +
                    "ing> Expressions { get; set; }\r\n            void And();\r\n            void Or();\r" +
                    "\n            void Add(string expression);\r\n            Queue<string> GetFilterEx" +
                    "pressions();\r\n        }\r\n\r\n        public interface IExpressionJoin<out T, out T" +
                    "Q> where T : IFilterContext\r\n        {\r\n            T And { get; }\r\n            " +
                    "T Or { get; }\r\n            TQ Filter();\r\n        }\r\n\r\n        public interface I" +
                    "StringFilter<out T, out TQ> where T : IFilterContext\r\n        {\r\n            IEx" +
                    "pressionJoin<T, TQ> EqualsTo(string str);\r\n            IExpressionJoin<T, TQ> No" +
                    "tEquals(string str);\r\n            IExpressionJoin<T, TQ> Contains(string str);\r\n" +
                    "            IExpressionJoin<T, TQ> StartsWith(string str);\r\n            IExpress" +
                    "ionJoin<T, TQ> EndsWith(string str);\r\n            IExpressionJoin<T, TQ> NotStar" +
                    "tsWith(string str);\r\n            IExpressionJoin<T, TQ> NotEndsWith(string str);" +
                    "\r\n            IExpressionJoin<T, TQ> IsEmpty();\r\n            IExpressionJoin<T, " +
                    "TQ> IsNotEmpty();\r\n            IExpressionJoin<T, TQ> IsNull();\r\n        }\r\n\r\n  " +
                    "      public interface INumberFilter<out T, out TQ> where T : IFilterContext\r\n  " +
                    "      {\r\n            IExpressionJoin<T, TQ> EqualsTo(double number);\r\n          " +
                    "  IExpressionJoin<T, TQ> NotEquals(double number);\r\n            IExpressionJoin<" +
                    "T, TQ> LargerThan(double number);\r\n            IExpressionJoin<T, TQ> LessThan(d" +
                    "ouble number);\r\n            IExpressionJoin<T, TQ> LargerThanOrEqualTo(double nu" +
                    "mber);\r\n            IExpressionJoin<T, TQ> LessThanOrEqualTo(double number);\r\n  " +
                    "          IExpressionJoin<T, TQ> Between(double from, double to);\r\n            I" +
                    "ExpressionJoin<T, TQ> IsNull();\r\n        }\r\n\r\n        public interface IDateFilt" +
                    "er<out T, out TQ> where T : IFilterContext\r\n        {\r\n\r\n            IExpression" +
                    "Join<T, TQ> EqualsTo(DateTime date);\r\n            IExpressionJoin<T, TQ> NotEqua" +
                    "ls(DateTime date);\r\n            IExpressionJoin<T, TQ> LargerThan(DateTime numbe" +
                    "r);\r\n            IExpressionJoin<T, TQ> LessThan(DateTime date);\r\n            IE" +
                    "xpressionJoin<T, TQ> LargerThanOrEqualTo(DateTime date);\r\n            IExpressio" +
                    "nJoin<T, TQ> LessThanOrEqualTo(DateTime date);\r\n            IExpressionJoin<T, T" +
                    "Q> Between(DateTime from, DateTime to);\r\n            IExpressionJoin<T, TQ> IsNu" +
                    "ll();\r\n        }\r\n\r\n        public interface IBoolFilter<out T, out TQ> where T " +
                    ": IFilterContext\r\n        {\r\n            IExpressionJoin<T, TQ> Is(bool value);\r" +
                    "\n            IExpressionJoin<T, TQ> IsFalse();\r\n            IExpressionJoin<T, T" +
                    "Q> IsTrue();\r\n            IExpressionJoin<T, TQ> IsNull();\r\n        }\r\n\r\n       " +
                    " #endregion\r\n\r\n        #region Ordering\r\n\r\n        public interface IOrderContex" +
                    "t\r\n        {\r\n            void And();\r\n            void Add(string expression);\r" +
                    "\n            Queue<string> GetOrderExpressions();\r\n        }\r\n\r\n        public i" +
                    "nterface IOrderJoin<out T, out TQ> where T : IOrderContext\r\n        {\r\n         " +
                    "   T And { get; }\r\n            TQ Order();\r\n        }\r\n\r\n        public interfac" +
                    "e IOrderElement<out T, out TQ> where T : IOrderContext\r\n        {\r\n            I" +
                    "OrderJoin<T, TQ> Ascending();\r\n            IOrderJoin<T, TQ> Descending();\r\n    " +
                    "    }\r\n\r\n        #endregion\r\n\r\n        #region Common\r\n\r\n        public interfac" +
                    "e IRepoQuery\r\n        {\r\n            string Target { get; set; }\r\n            Qu" +
                    "eue<string> Where { get; set; }\r\n            Queue<string> Order { get; set; }\r\n" +
                    "            int? PageSize { get; set; }\r\n            int? Page { get; set; }\r\n  " +
                    "          int? Limit { get; set; }\r\n            int? Skip { get; set; }\r\n       " +
                    "     int? Take { get; set; }\r\n            IDbTransaction Transaction { get; set;" +
                    " }\r\n        }\r\n\r\n        #endregion\r\n    }\r\n\r\n    namespace Concrete\r\n    {\r\n   " +
                    "     #region Filtering\r\n\r\n        public abstract class BaseFilterContext : IFil" +
                    "terContext\r\n        {\r\n            protected BaseFilterContext()\r\n            {\r" +
                    "\n                Expressions = new Queue<string>();\r\n            }\r\n\r\n          " +
                    "  public Queue<string> Expressions { get; set; }\r\n\r\n            public void And(" +
                    ")\r\n            {\r\n                Expressions.Enqueue(\"and\");\r\n            }\r\n\r\n" +
                    "            public void Or()\r\n            {\r\n                Expressions.Enqueue" +
                    "(\"or\");\r\n            }\r\n\r\n            public void Add(string expression)\r\n      " +
                    "      {\r\n                Expressions.Enqueue(expression);\r\n            }\r\n\r\n    " +
                    "        public Queue<string> GetFilterExpressions()\r\n            {\r\n            " +
                    "    return Expressions;\r\n            }\r\n        }\r\n\r\n        public class Expres" +
                    "sionJoin<T, TQ> : IExpressionJoin<T, TQ> where T : IFilterContext\r\n        {\r\n  " +
                    "          private readonly T _t;\r\n            private readonly TQ _q;\r\n\r\n       " +
                    "     internal ExpressionJoin(T t, TQ q)\r\n            {\r\n                _t = t;\r" +
                    "\n                _q = q;\r\n            }\r\n\r\n            public T And\r\n           " +
                    " {\r\n                get\r\n                {\r\n                    _t.And();\r\n     " +
                    "               return _t;\r\n                }\r\n            }\r\n\r\n            publi" +
                    "c T Or\r\n            {\r\n                get\r\n                {\r\n                 " +
                    "   _t.Or();\r\n                    return _t;\r\n                }\r\n            }\r\n\r" +
                    "\n            public TQ Filter()\r\n            {\r\n                return _q;\r\n    " +
                    "        }\r\n        }\r\n\r\n        public class StringFilter<T, TQ> : IStringFilter" +
                    "<T, TQ> where T : IFilterContext\r\n        {\r\n            private readonly string" +
                    " _propertyName;\r\n            private readonly T _parent;\r\n            private re" +
                    "adonly TQ _q;\r\n\r\n            internal StringFilter(string propertyName, T parent" +
                    ", TQ q)\r\n            {\r\n                _parent = parent;\r\n                _prop" +
                    "ertyName = propertyName;\r\n                _q = q;\r\n            }\r\n\r\n            " +
                    "public IExpressionJoin<T, TQ> EqualsTo(string str)\r\n            {\r\n             " +
                    "   _parent.Add(string.Format(\"[{0}] = \'{1}\'\", _propertyName, str));\r\n           " +
                    "     return new ExpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n          " +
                    "  public IExpressionJoin<T, TQ> NotEquals(string str)\r\n            {\r\n          " +
                    "      _parent.Add(string.Format(\"[{0}] != \'{1}\'\", _propertyName, str));\r\n       " +
                    "         return new ExpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n      " +
                    "      public IExpressionJoin<T, TQ> Contains(string str)\r\n            {\r\n       " +
                    "         _parent.Add(string.Format(\"[{0}] LIKE \'%{1}%\'\", _propertyName, str));\r\n" +
                    "                return new ExpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r" +
                    "\n            public IExpressionJoin<T, TQ> StartsWith(string str)\r\n            {" +
                    "\r\n                _parent.Add(string.Format(\"[{0}] LIKE \'{1}%\'\", _propertyName, " +
                    "str));\r\n                return new ExpressionJoin<T, TQ>(_parent, _q);\r\n        " +
                    "    }\r\n\r\n            public IExpressionJoin<T, TQ> EndsWith(string str)\r\n       " +
                    "     {\r\n                _parent.Add(string.Format(\"[{0}] LIKE \'%{1}\'\", _property" +
                    "Name, str));\r\n                return new ExpressionJoin<T, TQ>(_parent, _q);\r\n  " +
                    "          }\r\n\r\n            public IExpressionJoin<T, TQ> NotStartsWith(string st" +
                    "r)\r\n            {\r\n                _parent.Add(string.Format(\"[{0}] NOT LIKE \'{1" +
                    "}%\'\", _propertyName, str));\r\n                return new ExpressionJoin<T, TQ>(_p" +
                    "arent, _q);\r\n            }\r\n\r\n            public IExpressionJoin<T, TQ> NotEndsW" +
                    "ith(string str)\r\n            {\r\n                _parent.Add(string.Format(\"[{0}]" +
                    " NOT LIKE \'%{1}\'\", _propertyName, str));\r\n                return new ExpressionJ" +
                    "oin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n            public IExpressionJoin<T," +
                    " TQ> IsEmpty()\r\n            {\r\n                _parent.Add(string.Format(\"[{0}] " +
                    "= \'\'\", _propertyName));\r\n                return new ExpressionJoin<T, TQ>(_paren" +
                    "t, _q);\r\n            }\r\n\r\n            public IExpressionJoin<T, TQ> IsNotEmpty()" +
                    "\r\n            {\r\n                _parent.Add(string.Format(\"[{0}] != \'\'\", _prope" +
                    "rtyName));\r\n                return new ExpressionJoin<T, TQ>(_parent, _q);\r\n    " +
                    "        }\r\n\r\n            public IExpressionJoin<T, TQ> IsNull()\r\n            {\r\n" +
                    "                _parent.Add(string.Format(\"[{0}] IS NULL\", _propertyName));\r\n   " +
                    "             return new ExpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n    " +
                    "    }\r\n\r\n        public class NumberFilter<T, TQ> : INumberFilter<T, TQ> where T" +
                    " : IFilterContext\r\n        {\r\n            private readonly string _propertyName;" +
                    "\r\n            private readonly T _parent;\r\n            private readonly TQ _q;\r\n" +
                    "\r\n            internal NumberFilter(string propertyName, T parent, TQ q)\r\n      " +
                    "      {\r\n                _parent = parent;\r\n                _propertyName = prop" +
                    "ertyName;\r\n                _q = q;\r\n            }\r\n\r\n            public IExpress" +
                    "ionJoin<T, TQ> EqualsTo(double number)\r\n            {\r\n                _parent.A" +
                    "dd(string.Format(\"[{0}] = {1}\", _propertyName, number));\r\n                return" +
                    " new ExpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n            public IE" +
                    "xpressionJoin<T, TQ> NotEquals(double number)\r\n            {\r\n                _p" +
                    "arent.Add(string.Format(\"[{0}] != {1}\", _propertyName, number));\r\n              " +
                    "  return new ExpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n            p" +
                    "ublic IExpressionJoin<T, TQ> LargerThan(double number)\r\n            {\r\n         " +
                    "       _parent.Add(string.Format(\"[{0}] > {1}\", _propertyName, number));\r\n      " +
                    "          return new ExpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n     " +
                    "       public IExpressionJoin<T, TQ> LessThan(double number)\r\n            {\r\n   " +
                    "             _parent.Add(string.Format(\"[{0}] < {1}\", _propertyName, number));\r\n" +
                    "                return new ExpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r" +
                    "\n            public IExpressionJoin<T, TQ> LargerThanOrEqualTo(double number)\r\n " +
                    "           {\r\n                _parent.Add(string.Format(\"[{0}] >= {1}\", _propert" +
                    "yName, number));\r\n                return new ExpressionJoin<T, TQ>(_parent, _q);" +
                    "\r\n            }\r\n\r\n            public IExpressionJoin<T, TQ> LessThanOrEqualTo(d" +
                    "ouble number)\r\n            {\r\n                _parent.Add(string.Format(\"[{0}] <" +
                    "= {1}\", _propertyName, number));\r\n                return new ExpressionJoin<T, T" +
                    "Q>(_parent, _q);\r\n            }\r\n\r\n            public IExpressionJoin<T, TQ> Bet" +
                    "ween(double from, double to)\r\n            {\r\n                _parent.Add(string." +
                    "Format(\"[{0}] <= {1} and {0} >= {2}\", _propertyName, from, to));\r\n              " +
                    "  return new ExpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n            p" +
                    "ublic IExpressionJoin<T, TQ> IsNull()\r\n            {\r\n                _parent.Ad" +
                    "d(string.Format(\"[{0}] IS NULL\", _propertyName));\r\n                return new Ex" +
                    "pressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n        }\r\n\r\n        public cl" +
                    "ass DateFilter<T, TQ> : IDateFilter<T, TQ> where T : IFilterContext\r\n        {\r\n" +
                    "            private readonly string _propertyName;\r\n            private readonly" +
                    " T _parent;\r\n            private readonly TQ _q;\r\n\r\n            internal DateFil" +
                    "ter(string propertyName, T parent, TQ q)\r\n            {\r\n                _parent" +
                    " = parent;\r\n                _propertyName = propertyName;\r\n                _q = " +
                    "q;\r\n            }\r\n\r\n            public IExpressionJoin<T, TQ> EqualsTo(DateTime" +
                    " date)\r\n            {\r\n                _parent.Add(string.Format(\"[{0}] = \'{1}\'\"" +
                    ", _propertyName, date));\r\n                return new ExpressionJoin<T, TQ>(_pare" +
                    "nt, _q);\r\n            }\r\n\r\n            public IExpressionJoin<T, TQ> NotEquals(D" +
                    "ateTime date)\r\n            {\r\n                _parent.Add(string.Format(\"[{0}] !" +
                    "= \'{1}\'\", _propertyName, date));\r\n                return new ExpressionJoin<T, T" +
                    "Q>(_parent, _q);\r\n            }\r\n\r\n            public IExpressionJoin<T, TQ> Lar" +
                    "gerThan(DateTime number)\r\n            {\r\n                _parent.Add(string.Form" +
                    "at(\"[{0}] > \'{1}\'\", _propertyName, number));\r\n                return new Express" +
                    "ionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n            public IExpressionJoi" +
                    "n<T, TQ> LessThan(DateTime date)\r\n            {\r\n                _parent.Add(str" +
                    "ing.Format(\"[{0}] < \'{1}\'\", _propertyName, date));\r\n                return new E" +
                    "xpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n            public IExpress" +
                    "ionJoin<T, TQ> LargerThanOrEqualTo(DateTime date)\r\n            {\r\n              " +
                    "  _parent.Add(string.Format(\"[{0}] >= \'{1}\'\", _propertyName, date));\r\n          " +
                    "      return new ExpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n         " +
                    "   public IExpressionJoin<T, TQ> LessThanOrEqualTo(DateTime date)\r\n            {" +
                    "\r\n                _parent.Add(string.Format(\"[{0}] <= \'{1}\'\", _propertyName, dat" +
                    "e));\r\n                return new ExpressionJoin<T, TQ>(_parent, _q);\r\n          " +
                    "  }\r\n\r\n            public IExpressionJoin<T, TQ> Between(DateTime from, DateTime" +
                    " to)\r\n            {\r\n                _parent.Add(string.Format(\"([{0}] >= \'{1}\' " +
                    "and [{0}] <= \'{2}\')\", _propertyName, from, to));\r\n                return new Exp" +
                    "ressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n            public IExpressio" +
                    "nJoin<T, TQ> IsNull()\r\n            {\r\n                _parent.Add(string.Format(" +
                    "\"[{0}] IS NULL\", _propertyName));\r\n                return new ExpressionJoin<T, " +
                    "TQ>(_parent, _q);\r\n            }\r\n        }\r\n\r\n        public class BoolFilter<T" +
                    ", TQ> : IBoolFilter<T, TQ> where T : IFilterContext\r\n        {\r\n            priv" +
                    "ate readonly string _propertyName;\r\n            private readonly T _parent;\r\n   " +
                    "         private readonly TQ _q;\r\n\r\n            internal BoolFilter(string prope" +
                    "rtyName, T parent, TQ q)\r\n            {\r\n                _parent = parent;\r\n    " +
                    "            _propertyName = propertyName;\r\n                _q = q;\r\n            " +
                    "}\r\n\r\n            public IExpressionJoin<T, TQ> Is(bool value)\r\n            {\r\n  " +
                    "              _parent.Add(string.Format(\"[{0}] = {1}\", _propertyName, value ? 1 " +
                    ": 0));\r\n                return new ExpressionJoin<T, TQ>(_parent, _q);\r\n        " +
                    "    }\r\n\r\n            public IExpressionJoin<T, TQ> IsFalse()\r\n            {\r\n   " +
                    "             _parent.Add(string.Format(\"[{0}] != 0\", _propertyName));\r\n         " +
                    "       return new ExpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n        " +
                    "    public IExpressionJoin<T, TQ> IsTrue()\r\n            {\r\n                _pare" +
                    "nt.Add(string.Format(\"[{0}] != 1\", _propertyName));\r\n                return new " +
                    "ExpressionJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n            public IExpres" +
                    "sionJoin<T, TQ> IsNull()\r\n            {\r\n                _parent.Add(string.Form" +
                    "at(\"[{0}] IS NULL\", _propertyName));\r\n                return new ExpressionJoin<" +
                    "T, TQ>(_parent, _q);\r\n            }\r\n        }\r\n\r\n        #endregion\r\n\r\n        " +
                    "#region Ordering\r\n\r\n        public abstract class BaseOrderContext : IOrderConte" +
                    "xt\r\n        {\r\n            protected BaseOrderContext() { Expressions = new Queu" +
                    "e<string>(); }\r\n            protected Queue<string> Expressions { get; set; }\r\n " +
                    "           public void And() { Expressions.Enqueue(\",\"); }\r\n            public v" +
                    "oid Add(string expression) { Expressions.Enqueue(expression); }\r\n            pub" +
                    "lic Queue<string> GetOrderExpressions() { return Expressions; }\r\n        }\r\n\r\n  " +
                    "      public class OrderJoin<T, TQ> : IOrderJoin<T, TQ> where T : IOrderContext\r" +
                    "\n        {\r\n            private readonly T _t;\r\n            private readonly TQ " +
                    "_q;\r\n\r\n            internal OrderJoin(T t, TQ q)\r\n            {\r\n               " +
                    " _t = t;\r\n                _q = q;\r\n            }\r\n\r\n            public T And { g" +
                    "et { _t.And(); return _t; } }\r\n\r\n            public TQ Order()\r\n            {\r\n " +
                    "               return _q;\r\n            }\r\n        }\r\n\r\n        public class Orde" +
                    "rElement<T, TQ> : IOrderElement<T, TQ> where T : IOrderContext\r\n        {\r\n     " +
                    "       private readonly string _propertyName;\r\n            private readonly T _p" +
                    "arent;\r\n            private readonly TQ _q;\r\n\r\n            internal OrderElement" +
                    "(string propertyName, T parent, TQ q)\r\n            {\r\n                _parent = " +
                    "parent;\r\n                _propertyName = propertyName;\r\n                _q = q;\r" +
                    "\n            }\r\n\r\n            public IOrderJoin<T, TQ> Ascending()\r\n            " +
                    "{\r\n                _parent.Add(string.Format(\"[{0}] ASC\", _propertyName));\r\n    " +
                    "            return new OrderJoin<T, TQ>(_parent, _q);\r\n            }\r\n\r\n        " +
                    "    public IOrderJoin<T, TQ> Descending()\r\n            {\r\n                _paren" +
                    "t.Add(string.Format(\"[{0}] DESC\", _propertyName));\r\n                return new O" +
                    "rderJoin<T, TQ>(_parent, _q);\r\n            }\r\n        }\r\n\r\n        #endregion\r\n\r" +
                    "\n        #region Common\r\n\r\n        public class RepoQuery : IRepoQuery\r\n        " +
                    "{\r\n            internal RepoQuery()\r\n            {\r\n            }\r\n\r\n           " +
                    " public string Target { get; set; }\r\n            public Queue<string> Where { ge" +
                    "t; set; }\r\n            public Queue<string> Order { get; set; }\r\n            pub" +
                    "lic int? PageSize { get; set; }\r\n            public int? Page { get; set; }\r\n   " +
                    "         public int? Limit { get; set; }\r\n            public int? Skip { get; se" +
                    "t; }\r\n            public int? Take { get; set; }\r\n            public IDbTransact" +
                    "ion Transaction { get; set; }\r\n        }\r\n\r\n        #endregion\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class FiltersBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
