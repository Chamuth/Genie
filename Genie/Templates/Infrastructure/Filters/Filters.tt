<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
using System;
using System.Collections.Generic;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Filters.Abstract;

namespace <#=GenerationContext.BaseNamespace#>.Infrastructure.Filters
{
    namespace Abstract
    {
        #region Filtering

        public interface IFilterContext
        {
            Queue<string> Expressions { get; set; }
            void And();
            void Or();
            void Add(string expression);
            Queue<string> GetFilterExpressions();
        }

        public interface IExpressionJoin<out T, out TQ> where T : IFilterContext
        {
            T And { get; }
            T Or { get; }
            TQ Filter();
        }

        public interface IStringFilter<out T, out TQ> where T : IFilterContext
        {
            IExpressionJoin<T, TQ> Equals(string str);
            IExpressionJoin<T, TQ> NotEquals(string str);
            IExpressionJoin<T, TQ> Contains(string str);
            IExpressionJoin<T, TQ> StartsWith(string str);
            IExpressionJoin<T, TQ> EndsWith(string str);
            IExpressionJoin<T, TQ> NotStartsWith(string str);
            IExpressionJoin<T, TQ> NotEndsWith(string str);
            IExpressionJoin<T, TQ> IsEmpty();
            IExpressionJoin<T, TQ> IsNotEmpty();
            IExpressionJoin<T, TQ> IsNull();
        }

        public interface INumberFilter<out T, out TQ> where T : IFilterContext
        {
            IExpressionJoin<T, TQ> Equals(double number);
            IExpressionJoin<T, TQ> NotEquals(double number);
            IExpressionJoin<T, TQ> LargerThan(double number);
            IExpressionJoin<T, TQ> LessThan(double number);
            IExpressionJoin<T, TQ> LargerThanOrEqualTo(double number);
            IExpressionJoin<T, TQ> LessThanOrEqualTo(double number);
            IExpressionJoin<T, TQ> Between(double from, double to);
            IExpressionJoin<T, TQ> IsNull();
        }

        public interface IDateFilter<out T, out TQ> where T : IFilterContext
        {

            IExpressionJoin<T, TQ> Equals(DateTime date);
            IExpressionJoin<T, TQ> NotEquals(DateTime date);
            IExpressionJoin<T, TQ> LargerThan(DateTime number);
            IExpressionJoin<T, TQ> LessThan(DateTime date);
            IExpressionJoin<T, TQ> LargerThanOrEqualTo(DateTime date);
            IExpressionJoin<T, TQ> LessThanOrEqualTo(DateTime date);
            IExpressionJoin<T, TQ> Between(DateTime from, DateTime to);
            IExpressionJoin<T, TQ> IsNull();
        }

        public interface IBoolFilter<out T, out TQ> where T : IFilterContext
        {
            IExpressionJoin<T, TQ> Is(bool value);
            IExpressionJoin<T, TQ> IsFalse();
            IExpressionJoin<T, TQ> IsTrue();
            IExpressionJoin<T, TQ> IsNull();
        }

        #endregion

        #region Ordering

        public interface IOrderContext
        {
            void And();
            void Add(string expression);
            Queue<string> GetOrderExpressions();
        }

        public interface IOrderJoin<out T, out TQ> where T : IOrderContext
        {
            T And { get; }
            TQ Order();
        }

        public interface IOrderElement<out T, out TQ> where T : IOrderContext
        {
            IOrderJoin<T, TQ> Ascending();
            IOrderJoin<T, TQ> Descending();
        }

        #endregion
    }

    namespace Concrete
    {
        #region Filtering

        public abstract class BaseFilterContext : IFilterContext
        {
            protected BaseFilterContext()
            {
                Expressions = new Queue<string>();
            }

            public Queue<string> Expressions { get; set; }

            public void And()
            {
                Expressions.Enqueue("and");
            }

            public void Or()
            {
                Expressions.Enqueue("or");
            }

            public void Add(string expression)
            {
                Expressions.Enqueue(expression);
            }

            public Queue<string> GetFilterExpressions()
            {
                return Expressions;
            }
        }

        public class ExpressionJoin<T, TQ> : IExpressionJoin<T, TQ> where T : IFilterContext
        {
            private readonly T _t;
            private readonly TQ _q;

            internal ExpressionJoin(T t, TQ q)
            {
                _t = t;
                _q = q;
            }

            public T And
            {
                get
                {
                    _t.And();
                    return _t;
                }
            }

            public T Or
            {
                get
                {
                    _t.Or();
                    return _t;
                }
            }

            public TQ Filter()
            {
                return _q;
            }
        }

        public class StringFilter<T, TQ> : IStringFilter<T, TQ> where T : IFilterContext
        {
            private readonly string _propertyName;
            private readonly T _parent;
            private readonly TQ _q;

            internal StringFilter(string propertyName, T parent, TQ q)
            {
                _parent = parent;
                _propertyName = propertyName;
                _q = q;
            }

            public IExpressionJoin<T, TQ> Equals(string str)
            {
                _parent.Add(string.Format("[{0}] = '{1}'", _propertyName, str));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> NotEquals(string str)
            {
                _parent.Add(string.Format("[{0}] != '{1}'", _propertyName, str));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> Contains(string str)
            {
                _parent.Add(string.Format("[{0}] LIKE '%{1}%'", _propertyName, str));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> StartsWith(string str)
            {
                _parent.Add(string.Format("[{0}] LIKE '{1}%'", _propertyName, str));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> EndsWith(string str)
            {
                _parent.Add(string.Format("[{0}] LIKE '%{1}'", _propertyName, str));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> NotStartsWith(string str)
            {
                _parent.Add(string.Format("[{0}] NOT LIKE '{1}%'", _propertyName, str));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> NotEndsWith(string str)
            {
                _parent.Add(string.Format("[{0}] NOT LIKE '%{1}'", _propertyName, str));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> IsEmpty()
            {
                _parent.Add(string.Format("[{0}] = ''", _propertyName));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> IsNotEmpty()
            {
                _parent.Add(string.Format("[{0}] != ''", _propertyName));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> IsNull()
            {
                _parent.Add(string.Format("[{0}] IS NULL", _propertyName));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }
        }

        public class NumberFilter<T, TQ> : INumberFilter<T, TQ> where T : IFilterContext
        {
            private readonly string _propertyName;
            private readonly T _parent;
            private readonly TQ _q;

            internal NumberFilter(string propertyName, T parent, TQ q)
            {
                _parent = parent;
                _propertyName = propertyName;
                _q = q;
            }

            public IExpressionJoin<T, TQ> Equals(double number)
            {
                _parent.Add(string.Format("[{0}] = {1}", _propertyName, number));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> NotEquals(double number)
            {
                _parent.Add(string.Format("[{0}] != {1}", _propertyName, number));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> LargerThan(double number)
            {
                _parent.Add(string.Format("[{0}] > {1}", _propertyName, number));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> LessThan(double number)
            {
                _parent.Add(string.Format("[{0}] < {1}", _propertyName, number));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> LargerThanOrEqualTo(double number)
            {
                _parent.Add(string.Format("[{0}] >= {1}", _propertyName, number));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> LessThanOrEqualTo(double number)
            {
                _parent.Add(string.Format("[{0}] <= {1}", _propertyName, number));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> Between(double from, double to)
            {
                _parent.Add(string.Format("[{0}] <= {1} and {0} >= {2}", _propertyName, from, to));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> IsNull()
            {
                _parent.Add(string.Format("[{0}] IS NULL", _propertyName));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }
        }

        public class DateFilter<T, TQ> : IDateFilter<T, TQ> where T : IFilterContext
        {
            private readonly string _propertyName;
            private readonly T _parent;
            private readonly TQ _q;

            internal DateFilter(string propertyName, T parent, TQ q)
            {
                _parent = parent;
                _propertyName = propertyName;
                _q = q;
            }

            public IExpressionJoin<T, TQ> Equals(DateTime date)
            {
                _parent.Add(string.Format("[{0}] = '{1}'", _propertyName, date));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> NotEquals(DateTime date)
            {
                _parent.Add(string.Format("[{0}] != '{1}'", _propertyName, date));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> LargerThan(DateTime number)
            {
                _parent.Add(string.Format("[{0}] > '{1}'", _propertyName, number));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> LessThan(DateTime date)
            {
                _parent.Add(string.Format("[{0}] < '{1}'", _propertyName, date));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> LargerThanOrEqualTo(DateTime date)
            {
                _parent.Add(string.Format("[{0}] >= '{1}'", _propertyName, date));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> LessThanOrEqualTo(DateTime date)
            {
                _parent.Add(string.Format("[{0}] <= '{1}'", _propertyName, date));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> Between(DateTime from, DateTime to)
            {
                _parent.Add(string.Format("[{0}] <= '{1}' and {0} >= '{2}'", _propertyName, from, to));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> IsNull()
            {
                _parent.Add(string.Format("[{0}] IS NULL", _propertyName));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }
        }

        public class BoolFilter<T, TQ> : IBoolFilter<T, TQ> where T : IFilterContext
        {
            private readonly string _propertyName;
            private readonly T _parent;
            private readonly TQ _q;

            internal BoolFilter(string propertyName, T parent, TQ q)
            {
                _parent = parent;
                _propertyName = propertyName;
                _q = q;
            }

            public IExpressionJoin<T, TQ> Is(bool value)
            {
                _parent.Add(string.Format("[{0}] = {1}", _propertyName, value ? 1 : 0));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> IsFalse()
            {
                _parent.Add(string.Format("[{0}] != 0", _propertyName));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> IsTrue()
            {
                _parent.Add(string.Format("[{0}] != 1", _propertyName));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }

            public IExpressionJoin<T, TQ> IsNull()
            {
                _parent.Add(string.Format("[{0}] IS NULL", _propertyName));
                return new ExpressionJoin<T, TQ>(_parent, _q);
            }
        }

        #endregion

        #region Ordering

        public abstract class BaseOrderContext : IOrderContext
        {
            protected BaseOrderContext() { Expressions = new Queue<string>(); }
            protected Queue<string> Expressions { get; set; }
            public void And() { Expressions.Enqueue(","); }
            public void Add(string expression) { Expressions.Enqueue(expression); }
            public Queue<string> GetOrderExpressions() { return Expressions; }
        }

        public class OrderJoin<T, TQ> : IOrderJoin<T, TQ> where T : IOrderContext
        {
            private readonly T _t;
            private readonly TQ _q;

            internal OrderJoin(T t, TQ q)
            {
                _t = t;
                _q = q;
            }

            public T And { get { _t.And(); return _t; } }

            public TQ Order()
            {
                return _q;
            }
        }

        public class OrderElement<T, TQ> : IOrderElement<T, TQ> where T : IOrderContext
        {
            private readonly string _propertyName;
            private readonly T _parent;
            private readonly TQ _q;

            internal OrderElement(string propertyName, T parent, TQ q)
            {
                _parent = parent;
                _propertyName = propertyName;
                _q = q;
            }

            public IOrderJoin<T, TQ> Ascending()
            {
                _parent.Add(string.Format("[{0}] ASC", _propertyName));
                return new OrderJoin<T, TQ>(_parent, _q);
            }

            public IOrderJoin<T, TQ> Descending()
            {
                _parent.Add(string.Format("[{0}] DESC", _propertyName));
                return new OrderJoin<T, TQ>(_parent, _q);
            }
        }

        #endregion
    }
}