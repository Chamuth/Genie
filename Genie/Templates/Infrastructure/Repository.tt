<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Filters.Abstract;
using <#=GenerationContext.BaseNamespace#>.Dapper;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Interfaces;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Models;

namespace <#=GenerationContext.BaseNamespace#>.Infrastructure
{
    public abstract class Repository<T> : IRepository<T>
        where T : BaseModel
    {
        public IDbConnection Conn { get; }
        public IDapperContext Context { get;}
        public IUnitOfWork UnitOfWork { get;}

        protected Repository(IDapperContext context, IUnitOfWork unitOfWork)
        {
            Context = context;
            Conn = Context.Connection;
            UnitOfWork = unitOfWork;
        }

        public virtual void Add(T entity, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (entity == null)
            {
                throw new ArgumentNullException("entity", "Add to DB null entity");
            }
            
            entity.DatabaseModelStatus = ModelStatus.Retrieved;
            entity.DatabaseUnitOfWork = UnitOfWork;           
            var operation = new Operation(OperationType.Add, entity);
            UnitOfWork.AddOp(operation);    
        }

        public virtual void Remove(T entity, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (entity == null)
            {
                throw new ArgumentNullException("entity", "Remove in DB null entity");
            }
            
            var operation = new Operation(OperationType.Remove, entity);
            UnitOfWork.AddOp(operation);
        }

        public virtual IEnumerable<T> Get(IRepoQuery query)
        {
            var items = Conn.Get<T>(query).ToList();

            foreach (var item in items)
            {
                item.DatabaseUnitOfWork = UnitOfWork;
                item.DatabaseModelStatus = ModelStatus.Retrieved;
                UnitOfWork.AddObj(item);
            }
            return items;
        }

        public virtual int Count(IRepoQuery query)
        {
            return Conn.Count(query);
        }
    }
}
