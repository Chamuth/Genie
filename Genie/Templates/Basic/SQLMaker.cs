// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Genie.Templates.Basic
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\Genie\Genie\Templates\Basic\SQLMaker.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class SQLMaker : SQLMakerBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n    namespace SqlMaker\r\n    {\r\n        namespace Interfaces\r\n        {\r\n       " +
                    "     public interface ISqlMakerBase\r\n            {\r\n                string RawSq" +
                    "l();\r\n            }\r\n\r\n            public interface ISqlMakerSelect : ISqlMakerB" +
                    "ase\r\n            {\r\n                ISqlMakerSelect UNION(bool IsALL = false);\r\n" +
                    "\r\n                ISqlMakerSelect Col(string columnName, string columnAliace = n" +
                    "ull);\r\n                ISqlMakerSelect FROM(string tables = null);\r\n            " +
                    "    ISqlMakerSelect Tab(string tableName, string tableAliace = null, string tabl" +
                    "eScheme = null);\r\n                ISqlMakerSelect WHERE(string whereConditions);" +
                    "\r\n                ISqlMakerSelect WhereAnd(string whereConditions);\r\n           " +
                    "     ISqlMakerSelect WhereOr(string whereConditions);\r\n                ISqlMaker" +
                    "Select JOIN(string tableName, string tableAliace = null);\r\n                ISqlM" +
                    "akerSelect LeftJoin(string tableName, string tableAliace = null);\r\n             " +
                    "   ISqlMakerSelect RightJoin(string tableName, string tableAliace = null);\r\n    " +
                    "            ISqlMakerSelect FullJoin(string tableName, string tableAliace = null" +
                    ");\r\n                ISqlMakerSelect ON(string condition);\r\n                ISqlM" +
                    "akerSelect OnAnd(string condition);\r\n                ISqlMakerSelect OnOr(string" +
                    " condition);\r\n                ISqlMakerSelect ORDERBY(string columnName, SortAs " +
                    "direction);\r\n                ISqlMakerSelect OrderThen(string columnName, SortAs" +
                    " direction);\r\n                ISqlMakerSelect GROUPBY(string columnName);\r\n     " +
                    "           ISqlMakerSelect GroupThen(string columnName);\r\n                ISqlMa" +
                    "kerSelect HAVING(string havingConditions);\r\n                ISqlMakerSelect Havi" +
                    "ngAnd(string havingConditions);\r\n                ISqlMakerSelect HavingOr(string" +
                    " havingConditions);\r\n            }\r\n\r\n            public interface ISqlMakerInse" +
                    "rt : ISqlMakerBase\r\n            {\r\n                ISqlMakerInsert Col(string co" +
                    "lumnName);\r\n                ISqlMakerInsert VALUES(string parameters = null);\r\n " +
                    "               ISqlMakerInsert Param(string paramName);\r\n            }\r\n\r\n      " +
                    "      public interface ISqlMakerUpdate : ISqlMakerBase\r\n            {\r\n         " +
                    "       ISqlMakerUpdate SET(string columnsValues = null);\r\n                ISqlMa" +
                    "kerUpdate Val(string columnName, string parameterAliace);\r\n                ISqlM" +
                    "akerUpdate WHERE(string whereConditions);\r\n                ISqlMakerUpdate Where" +
                    "And(string whereConditions);\r\n                ISqlMakerUpdate WhereOr(string whe" +
                    "reConditions);\r\n            }\r\n\r\n            public interface ISqlMakerDelete : " +
                    "ISqlMakerBase\r\n            {\r\n                ISqlMakerDelete WHERE(string where" +
                    "Conditions);\r\n                ISqlMakerDelete WhereAnd(string whereConditions);\r" +
                    "\n                ISqlMakerDelete WhereOr(string whereConditions);\r\n            }" +
                    "\r\n\r\n            public interface ISqlFirst\r\n            {\r\n                ISqlM" +
                    "akerSelect SELECT(string columns = null);\r\n                ISqlMakerSelect Selec" +
                    "tDistinct(string columns = null);\r\n                ISqlMakerInsert INSERT(string" +
                    " tableName);\r\n                ISqlMakerUpdate UPDATE(string tableName);\r\n       " +
                    "         ISqlMakerDelete DELETE(string tableName);\r\n            }\r\n\r\n           " +
                    " public interface ISqlMaker : ISqlFirst, ISqlMakerSelect, ISqlMakerInsert, ISqlM" +
                    "akerUpdate, ISqlMakerDelete\r\n            {\r\n            }\r\n        }\r\n\r\n        " +
                    "public class QueryMaker : ISqlMaker\r\n        {\r\n            private enum ClauseT" +
                    "ype\r\n            {\r\n                ActionInsert,\r\n                ActionInsertV" +
                    "alues,\r\n                ActionUpdate,\r\n                ActionUpdateSet,\r\n       " +
                    "         ActionUpdateValues,\r\n                ActionUpdateWhere,\r\n              " +
                    "  ActionSelect,\r\n                ActionSelectWhereOnHaving,\r\n                Act" +
                    "ionSelectJoin,\r\n                ActionSelectOrder,\r\n                ActionSelect" +
                    "Group,\r\n                ActionDelete,\r\n                ActionDeleteWhere,\r\n     " +
                    "           Table,\r\n                Column,\r\n                Parameter,\r\n        " +
                    "    }\r\n\r\n            private static string br = \"\\n\";\r\n            private stati" +
                    "c string brIndent = \"\\n\\t\";\r\n            private static string brIndentX2 = \"\\n\\" +
                    "t\\t\";\r\n\r\n            private static string _dbScheme;\r\n\r\n            public stat" +
                    "ic string DbScheme { get { return _dbScheme; } set { _dbScheme = value; } }\r\n\r\n " +
                    "           private static List<Clause> _clauses;\r\n            private static Lis" +
                    "t<Clause> Clauses\r\n            {\r\n                get { return _clauses ?? (_cla" +
                    "uses = new List<Clause>()); }\r\n            }\r\n\r\n            private class Clause" +
                    "\r\n            {\r\n                public static Clause New(ClauseType type, strin" +
                    "g sqlPart = null, string name = null, string aliace = null,\r\n                   " +
                    "                      string condition = null, string direction = null, string e" +
                    "xtra = null)\r\n                {\r\n                    return new Clause\r\n        " +
                    "            {\r\n                        ClauseType = type,\r\n                     " +
                    "   SqlPart = sqlPart,\r\n                        Name = name,\r\n                   " +
                    "     Aliace = aliace,\r\n                        Condition = condition,\r\n         " +
                    "               Direction = direction,\r\n                        Extra = extra\r\n  " +
                    "                  };\r\n                }\r\n\r\n                public ClauseType Cla" +
                    "useType { get; private set; }\r\n                public string SqlPart { get; priv" +
                    "ate set; }\r\n                public string Name { get; private set; }\r\n          " +
                    "      public string Aliace { get; private set; }\r\n                public string " +
                    "Condition { get; private set; }\r\n                public string Direction { get; " +
                    "private set; }\r\n                public string Extra { get; private set; }\r\n     " +
                    "       }\r\n\r\n            private static ISqlMaker _sqlMaker;\r\n\r\n            publi" +
                    "c static ISqlMaker Current\r\n            {\r\n                get { return _sqlMake" +
                    "r ?? (_sqlMaker = new QueryMaker()); }\r\n            }\r\n            public static" +
                    " ISqlFirst New(string dbScheme = null)\r\n            {\r\n                if (!stri" +
                    "ng.IsNullOrEmpty(dbScheme))\r\n                {\r\n                    _dbScheme = " +
                    "dbScheme;\r\n                }\r\n                Clauses.Clear();\r\n                " +
                    "_sqlMaker = new QueryMaker();\r\n                return _sqlMaker;\r\n            }\r" +
                    "\n\r\n            #region Common Method\r\n            private static string FormatSc" +
                    "heme(string globalScheme, string currentScheme = null)\r\n            {\r\n         " +
                    "       if (!string.IsNullOrEmpty(currentScheme))\r\n                {\r\n           " +
                    "         return string.Format(\"[{0}].\", currentScheme.Trim());\r\n                " +
                    "}\r\n                if (!string.IsNullOrEmpty(globalScheme))\r\n                {\r\n" +
                    "                    return string.Format(\"[{0}].\", globalScheme.Trim());\r\n      " +
                    "          }\r\n                return string.Empty;\r\n            }\r\n            pr" +
                    "ivate static string FormatAliace(string aliace)\r\n            {\r\n                " +
                    "if (!string.IsNullOrEmpty(aliace))\r\n                {\r\n                    retur" +
                    "n string.Format(\" AS {0}\", aliace.Trim());\r\n                }\r\n                r" +
                    "eturn string.Empty;\r\n            }\r\n            private static string FormatTabl" +
                    "eNameWithShema(string scheme, string tableName)\r\n            {\r\n                " +
                    "return string.Format(\"{0}[{1}]\", scheme, tableName.Trim());\r\n            }\r\n    " +
                    "        private static string ResolveStringToRows(string extra, string indent)\r\n" +
                    "            {\r\n                var sb = new StringBuilder();\r\n                va" +
                    "r delimiters = new char[] { \',\', \';\' };\r\n                var array = extra.Split" +
                    "(delimiters);\r\n                var firstParam = true;\r\n                foreach (" +
                    "var s in array)\r\n                {\r\n                    if (firstParam)\r\n       " +
                    "             {\r\n                        sb.Append(indent + s.Trim());\r\n         " +
                    "               firstParam = false;\r\n                    }\r\n                    e" +
                    "lse\r\n                    {\r\n                        sb.Append(indent + \", \" + s." +
                    "Trim());\r\n                    }\r\n                }\r\n                return sb.To" +
                    "String();\r\n            }\r\n            private static string FormatParameter(stri" +
                    "ng paramName)\r\n            {\r\n                return paramName.Contains(\"@\") ? p" +
                    "aramName.Trim() : \"@\" + paramName.Trim();\r\n            }\r\n            #endregion" +
                    "\r\n\r\n            #region Resolve Sql Query\r\n            private static string Res" +
                    "olveInsert(IEnumerable<Clause> list, string dbScheme)\r\n            {\r\n          " +
                    "      var sb = new StringBuilder();\r\n                var sqlScheme = FormatSchem" +
                    "e(dbScheme);\r\n                var isFirstCol = true;\r\n                var lastBk" +
                    "t = false;\r\n                var insertedParams = false;\r\n                var col" +
                    "Count = list.Count(i => i.ClauseType == ClauseType.Column);\r\n                var" +
                    " count = 0;\r\n                foreach (var clause in list)\r\n                {\r\n  " +
                    "                  switch (clause.ClauseType)\r\n                    {\r\n           " +
                    "             case ClauseType.ActionInsert:\r\n                            sb.Appen" +
                    "d(clause.SqlPart);\r\n                            sb.Append(\" \");\r\n               " +
                    "             sb.Append(FormatTableNameWithShema(sqlScheme, clause.Name));\r\n     " +
                    "                       break;\r\n                        case ClauseType.Column:\r\n" +
                    "                            count += 1;\r\n                            if (isFirst" +
                    "Col)\r\n                            {\r\n                                sb.Append(\"" +
                    " (\");\r\n                            }\r\n                            if (isFirstCol" +
                    ")\r\n                            {\r\n                                sb.Append(brIn" +
                    "dentX2 + \"[\" + clause.Name + \"]\");\r\n                                isFirstCol =" +
                    " false;\r\n                            }\r\n                            else\r\n      " +
                    "                      {\r\n                                sb.Append(brIndentX2 + " +
                    "\", [\" + clause.Name + \"]\");\r\n                            }\r\n                    " +
                    "        if (count == colCount)\r\n                            {\r\n                 " +
                    "               sb.Append(brIndent + \")\");\r\n                            }\r\n      " +
                    "                      break;\r\n                        case ClauseType.ActionInse" +
                    "rtValues:\r\n                            lastBkt = true;\r\n                        " +
                    "    sb.Append(brIndent);\r\n                            sb.Append(clause.SqlPart);" +
                    "\r\n                            sb.Append(\" (\");\r\n                            if (" +
                    "!string.IsNullOrEmpty(clause.Extra))\r\n                            {\r\n           " +
                    "                     insertedParams = true;\r\n                                sb." +
                    "Append(ResolveStringToRows(clause.Extra, brIndentX2));\r\n                        " +
                    "    }\r\n                            break;\r\n                        case ClauseTy" +
                    "pe.Parameter:\r\n                            var paramName = FormatParameter(claus" +
                    "e.Name);\r\n                            if (!insertedParams)\r\n                    " +
                    "        {\r\n                                insertedParams = true;\r\n             " +
                    "                   sb.Append(brIndentX2 + paramName);\r\n                         " +
                    "   }\r\n                            else\r\n                            {\r\n         " +
                    "                       sb.Append(brIndentX2 + \", \" + paramName);\r\n              " +
                    "              }\r\n                            break;\r\n                        def" +
                    "ault:\r\n                            throw new ArgumentOutOfRangeException(\"Wrong " +
                    "clause type in Insert resolving method\");\r\n                    }\r\n              " +
                    "  }\r\n                if (lastBkt)\r\n                {\r\n                    sb.App" +
                    "end(brIndent + \");\");\r\n                }\r\n                return sb.ToString();\r" +
                    "\n            }\r\n\r\n            private static string ResolveUpdate(List<Clause> l" +
                    "ist, string dbScheme)\r\n            {\r\n                var sb = new StringBuilder" +
                    "();\r\n                var sqlScheme = FormatScheme(dbScheme);\r\n                va" +
                    "r isSetParam = false;\r\n                foreach (var clause in list)\r\n           " +
                    "     {\r\n                    switch (clause.ClauseType)\r\n                    {\r\n " +
                    "                       case ClauseType.ActionUpdate:\r\n                          " +
                    "  sb.Append(clause.SqlPart);\r\n                            sb.Append(\" \");\r\n     " +
                    "                       sb.Append(FormatTableNameWithShema(sqlScheme, clause.Name" +
                    "));\r\n                            break;\r\n                        case ClauseType" +
                    ".ActionUpdateSet:\r\n                            sb.Append(br);\r\n                 " +
                    "           sb.Append(clause.SqlPart);\r\n                            if (!string.I" +
                    "sNullOrEmpty(clause.Extra))\r\n                            {\r\n                    " +
                    "            isSetParam = true;\r\n                                sb.Append(Resolv" +
                    "eStringToRows(clause.Extra, brIndent));\r\n                            }\r\n        " +
                    "                    break;\r\n                        case ClauseType.ActionUpdate" +
                    "Values:\r\n                            if (!isSetParam)\r\n                         " +
                    "   {\r\n                                isSetParam = true;\r\n                      " +
                    "          sb.Append(brIndent + clause.Name.Trim());\r\n                           " +
                    "     sb.Append(\" = \");\r\n                                sb.Append(FormatParamete" +
                    "r(clause.Aliace));\r\n                            }\r\n                            e" +
                    "lse\r\n                            {\r\n                                sb.Append(br" +
                    "Indent + \", \" + clause.Name.Trim());\r\n                                sb.Append(" +
                    "\" = \");\r\n                                sb.Append(FormatParameter(clause.Aliace" +
                    "));\r\n                            }\r\n                            break;\r\n        " +
                    "                case ClauseType.ActionUpdateWhere:\r\n                            " +
                    "sb.Append(clause.SqlPart);\r\n                            sb.Append(clause.Conditi" +
                    "on.Trim());\r\n                            break;\r\n                        default" +
                    ":\r\n                            throw new ArgumentOutOfRangeException();\r\n       " +
                    "             }\r\n                }\r\n                sb.Append(\";\");\r\n            " +
                    "    return sb.ToString();\r\n            }\r\n\r\n            private static string Re" +
                    "solveSelect(List<Clause> list, string dbScheme)\r\n            {\r\n                " +
                    "var sb = new StringBuilder();\r\n                bool isFirst = true;\r\n           " +
                    "     foreach (var clause in list)\r\n                {\r\n                    switch" +
                    " (clause.ClauseType)\r\n                    {\r\n                        case Clause" +
                    "Type.ActionSelect:\r\n                            isFirst = true; // SELECT or UNI" +
                    "ON\r\n                            sb.Append(clause.SqlPart);\r\n                    " +
                    "        if (!string.IsNullOrEmpty(clause.Extra))\r\n                            {\r" +
                    "\n                                isFirst = false;\r\n                             " +
                    "   sb.Append(ResolveStringToRows(clause.Extra, brIndent));\r\n                    " +
                    "        }\r\n                            break;\r\n                        case Clau" +
                    "seType.ActionSelectWhereOnHaving:\r\n                            sb.Append(clause." +
                    "SqlPart);\r\n                            sb.Append(clause.Condition.Trim());\r\n    " +
                    "                        break;\r\n                        case ClauseType.ActionSe" +
                    "lectJoin:\r\n                            var schemeJoin = FormatScheme(dbScheme, c" +
                    "lause.Extra);\r\n                            var tabNameJoin = FormatTableNameWith" +
                    "Shema(schemeJoin, clause.Name);\r\n                            var tabAliaceJoin =" +
                    " FormatAliace(clause.Aliace);\r\n                            sb.Append(clause.SqlP" +
                    "art);\r\n                            sb.Append(tabNameJoin + tabAliaceJoin);\r\n    " +
                    "                        break;\r\n                        case ClauseType.ActionSe" +
                    "lectOrder:\r\n                            sb.Append(clause.SqlPart);\r\n            " +
                    "                sb.Append(clause.Name.Trim());\r\n                            sb.A" +
                    "ppend(\" \");\r\n                            sb.Append(clause.Direction);\r\n         " +
                    "                   break;\r\n                        case ClauseType.ActionSelectG" +
                    "roup:\r\n                            sb.Append(clause.SqlPart);\r\n                 " +
                    "           sb.Append(clause.Name.Trim());\r\n                            break;\r\n " +
                    "                       case ClauseType.Table:\r\n                            var s" +
                    "cheme = FormatScheme(dbScheme, clause.Extra);\r\n                            var t" +
                    "abName = FormatTableNameWithShema(scheme, clause.Name);\r\n                       " +
                    "     var tabAliace = FormatAliace(clause.Aliace);\r\n                            i" +
                    "f (isFirst)\r\n                            {\r\n                                isFi" +
                    "rst = false;\r\n                                sb.Append(brIndent + tabName + tab" +
                    "Aliace);\r\n                            }\r\n                            else\r\n     " +
                    "                       {\r\n                                sb.Append(brIndent + \"" +
                    ", \" + tabName + tabAliace);\r\n                            }\r\n                    " +
                    "        break;\r\n                        case ClauseType.Column:\r\n               " +
                    "             var aliace = string.IsNullOrEmpty(clause.Aliace) ? string.Empty : \"" +
                    " AS \" + clause.Aliace.Trim();\r\n                            if (isFirst)\r\n       " +
                    "                     {\r\n                                isFirst = false;\r\n      " +
                    "                          sb.Append(brIndent + clause.Name.Trim() + aliace);\r\n  " +
                    "                          }\r\n                            else\r\n                 " +
                    "           {\r\n                                sb.Append(brIndent + \", \" + clause" +
                    ".Name.Trim() + aliace);\r\n                            }\r\n                        " +
                    "    break;\r\n                        default:\r\n                            throw " +
                    "new ArgumentOutOfRangeException();\r\n                    }\r\n                }\r\n  " +
                    "              sb.Append(\";\");\r\n                return sb.ToString();\r\n          " +
                    "  }\r\n\r\n            private static string ResolveDelete(List<Clause> list, string" +
                    " dbScheme)\r\n            {\r\n                var sb = new StringBuilder();\r\n      " +
                    "          var sqlScheme = FormatScheme(dbScheme);\r\n                foreach (var " +
                    "clause in list)\r\n                {\r\n                    switch (clause.ClauseTyp" +
                    "e)\r\n                    {\r\n                        case ClauseType.ActionDelete:" +
                    "\r\n                            sb.Append(clause.SqlPart);\r\n                      " +
                    "      sb.Append(\" \");\r\n                            sb.Append(FormatTableNameWith" +
                    "Shema(sqlScheme, clause.Name));\r\n                            break;\r\n           " +
                    "             case ClauseType.ActionDeleteWhere:\r\n                            sb." +
                    "Append(clause.SqlPart);\r\n                            sb.Append(clause.Condition." +
                    "Trim());\r\n                            break;\r\n                        default:\r\n" +
                    "                            throw new ArgumentOutOfRangeException();\r\n          " +
                    "          }\r\n                }\r\n                sb.Append(\";\");\r\n               " +
                    " return sb.ToString();\r\n            }\r\n            #endregion Resolve Sql Query\r" +
                    "\n\r\n            public virtual string RawSql()\r\n            {\r\n                st" +
                    "ring sqlResult = null;\r\n                if (Clauses.Count == 0)\r\n               " +
                    " {\r\n                    throw new Exception(\"Empty query\");\r\n                }\r\n" +
                    "                var first = Clauses.First();\r\n                switch (first.Clau" +
                    "seType)\r\n                {\r\n                    case ClauseType.ActionInsert:\r\n " +
                    "                       sqlResult = ResolveInsert(Clauses, _dbScheme);\r\n         " +
                    "               break;\r\n                    case ClauseType.ActionUpdate:\r\n      " +
                    "                  sqlResult = ResolveUpdate(Clauses, _dbScheme);\r\n              " +
                    "          break;\r\n                    case ClauseType.ActionSelect:\r\n           " +
                    "             sqlResult = ResolveSelect(Clauses, _dbScheme);\r\n                   " +
                    "     break;\r\n                    case ClauseType.ActionDelete:\r\n                " +
                    "        sqlResult = ResolveDelete(Clauses, _dbScheme);\r\n                        " +
                    "break;\r\n                    default:\r\n                        throw new Exceptio" +
                    "n(\"Wrong start of query\");\r\n                }\r\n                return sqlResult;" +
                    "\r\n            }\r\n\r\n            #region SELECT\r\n            public virtual ISqlMa" +
                    "kerSelect SELECT(string columns = null)\r\n            {\r\n                Clauses." +
                    "Add(Clause.New(ClauseType.ActionSelect, \"SELECT\", extra: columns));\r\n           " +
                    "     return this;\r\n            }\r\n\r\n            public virtual ISqlMakerSelect S" +
                    "electDistinct(string columns = null)\r\n            {\r\n                Clauses.Add" +
                    "(Clause.New(ClauseType.ActionSelect, \"SELECT DISTINCT\", extra: columns));\r\n     " +
                    "           return this;\r\n            }\r\n\r\n            public virtual ISqlMakerSe" +
                    "lect UNION(bool IsALL = false)\r\n            {\r\n                var sqlPart = br " +
                    "+ \"UNION\" + (IsALL ? \" ALL\" : string.Empty) + br + \"SELECT\";\r\n                Cl" +
                    "auses.Add(Clause.New(ClauseType.ActionSelect, sqlPart));\r\n                return" +
                    " this;\r\n            }\r\n\r\n            public virtual ISqlMakerSelect Col(string c" +
                    "olumnName, string columnAliace = null)\r\n            {\r\n                Clauses.A" +
                    "dd(Clause.New(ClauseType.Column, name: columnName, aliace: columnAliace));\r\n    " +
                    "            return this;\r\n            }\r\n\r\n            public virtual ISqlMakerS" +
                    "elect FROM(string tables = null)\r\n            {\r\n                Clauses.Add(Cla" +
                    "use.New(ClauseType.ActionSelect, br + \"FROM\", extra: tables));\r\n                " +
                    "return this;\r\n            }\r\n\r\n            public virtual ISqlMakerSelect Tab(st" +
                    "ring tableName, string tableAliace = null, string tableScheme = null)\r\n         " +
                    "   {\r\n                Clauses.Add(Clause.New(ClauseType.Table, name: tableName, " +
                    "aliace: tableAliace, extra: tableScheme));\r\n                return this;\r\n      " +
                    "      }\r\n\r\n            ISqlMakerSelect ISqlMakerSelect.WHERE(string whereConditi" +
                    "ons)\r\n            {\r\n                Clauses.Add(Clause.New(ClauseType.ActionSel" +
                    "ectWhereOnHaving, br + \"WHERE\" + brIndent, condition: whereConditions));\r\n      " +
                    "          return this;\r\n            }\r\n\r\n            ISqlMakerSelect ISqlMakerSe" +
                    "lect.WhereAnd(string whereConditions)\r\n            {\r\n                Clauses.Ad" +
                    "d(Clause.New(ClauseType.ActionSelectWhereOnHaving, brIndent + \"AND \", condition:" +
                    " whereConditions));\r\n                return this;\r\n            }\r\n\r\n            " +
                    "ISqlMakerSelect ISqlMakerSelect.WhereOr(string whereConditions)\r\n            {\r\n" +
                    "                Clauses.Add(Clause.New(ClauseType.ActionSelectWhereOnHaving, brI" +
                    "ndent + \"OR \", condition: whereConditions));\r\n                return this;\r\n    " +
                    "        }\r\n\r\n            public virtual ISqlMakerSelect JOIN(string tableName, s" +
                    "tring tableAliace = null)\r\n            {\r\n                Clauses.Add(Clause.New" +
                    "(ClauseType.ActionSelectJoin, br + \"INNER JOIN \", name: tableName, aliace: table" +
                    "Aliace));\r\n                return this;\r\n            }\r\n\r\n            public vir" +
                    "tual ISqlMakerSelect LeftJoin(string tableName, string tableAliace = null)\r\n    " +
                    "        {\r\n                Clauses.Add(Clause.New(ClauseType.ActionSelectJoin, b" +
                    "r + \"LEFT JOIN \", name: tableName, aliace: tableAliace));\r\n                retur" +
                    "n this;\r\n            }\r\n\r\n            public virtual ISqlMakerSelect RightJoin(s" +
                    "tring tableName, string tableAliace = null)\r\n            {\r\n                Clau" +
                    "ses.Add(Clause.New(ClauseType.ActionSelectJoin, br + \"RIGHT JOIN \", name: tableN" +
                    "ame, aliace: tableAliace));\r\n                return this;\r\n            }\r\n\r\n    " +
                    "        public virtual ISqlMakerSelect FullJoin(string tableName, string tableAl" +
                    "iace = null)\r\n            {\r\n                Clauses.Add(Clause.New(ClauseType.A" +
                    "ctionSelectJoin, br + \"FULL JOIN \", name: tableName, aliace: tableAliace));\r\n   " +
                    "             return this;\r\n            }\r\n\r\n            public virtual ISqlMaker" +
                    "Select ON(string condition)\r\n            {\r\n                Clauses.Add(Clause.N" +
                    "ew(ClauseType.ActionSelectWhereOnHaving, brIndent + \"ON \", condition: condition)" +
                    ");\r\n                return this;\r\n            }\r\n\r\n            public virtual IS" +
                    "qlMakerSelect OnAnd(string condition)\r\n            {\r\n                Clauses.Ad" +
                    "d(Clause.New(ClauseType.ActionSelectWhereOnHaving, brIndent + \"AND \", condition:" +
                    " condition));\r\n                return this;\r\n            }\r\n\r\n            public" +
                    " virtual ISqlMakerSelect OnOr(string condition)\r\n            {\r\n                " +
                    "Clauses.Add(Clause.New(ClauseType.ActionSelectWhereOnHaving, brIndent + \"OR \", c" +
                    "ondition: condition));\r\n                return this;\r\n            }\r\n\r\n         " +
                    "   public virtual ISqlMakerSelect ORDERBY(string columnName, SortAs direction)\r\n" +
                    "            {\r\n                Clauses.Add(Clause.New(ClauseType.ActionSelectOrd" +
                    "er, br + \"ORDER BY \", name: columnName, direction: direction.ToString().ToUpperI" +
                    "nvariant()));\r\n                return this;\r\n            }\r\n\r\n            public" +
                    " virtual ISqlMakerSelect OrderThen(string columnName, SortAs direction)\r\n       " +
                    "     {\r\n                Clauses.Add(Clause.New(ClauseType.ActionSelectOrder, \", " +
                    "\", name: columnName, direction: direction.ToString().ToUpperInvariant()));\r\n    " +
                    "            return this;\r\n            }\r\n\r\n            public virtual ISqlMakerS" +
                    "elect GROUPBY(string columnName)\r\n            {\r\n                Clauses.Add(Cla" +
                    "use.New(ClauseType.ActionSelectGroup, br + \"GROUP BY \", name: columnName));\r\n   " +
                    "             return this;\r\n            }\r\n\r\n            public virtual ISqlMaker" +
                    "Select GroupThen(string columnName)\r\n            {\r\n                Clauses.Add(" +
                    "Clause.New(ClauseType.ActionSelectGroup, \", \", name: columnName));\r\n            " +
                    "    return this;\r\n            }\r\n\r\n            public virtual ISqlMakerSelect HA" +
                    "VING(string havingConditions)\r\n            {\r\n                Clauses.Add(Clause" +
                    ".New(ClauseType.ActionSelectWhereOnHaving, br + \"HAVING \", condition: havingCond" +
                    "itions));\r\n                return this;\r\n            }\r\n\r\n            public vir" +
                    "tual ISqlMakerSelect HavingAnd(string havingConditions)\r\n            {\r\n        " +
                    "        Clauses.Add(Clause.New(ClauseType.ActionSelectWhereOnHaving, brIndent + " +
                    "\"AND \", condition: havingConditions));\r\n                return this;\r\n          " +
                    "  }\r\n\r\n            public virtual ISqlMakerSelect HavingOr(string havingConditio" +
                    "ns)\r\n            {\r\n                Clauses.Add(Clause.New(ClauseType.ActionSele" +
                    "ctWhereOnHaving, brIndent + \"OR \", condition: havingConditions));\r\n             " +
                    "   return this;\r\n            }\r\n            #endregion SELECT\r\n\r\n            #re" +
                    "gion INSERT\r\n            public virtual ISqlMakerInsert INSERT(string tableName)" +
                    "\r\n            {\r\n                Clauses.Add(Clause.New(ClauseType.ActionInsert," +
                    " \"INSERT INTO\", name: tableName));\r\n                return this;\r\n            }\r" +
                    "\n            public virtual ISqlMakerInsert Col(string columnName)\r\n            " +
                    "{\r\n                Clauses.Add(Clause.New(ClauseType.Column, name: columnName));" +
                    "\r\n                return this;\r\n            }\r\n\r\n            public virtual ISql" +
                    "MakerInsert VALUES(string parameters = null)\r\n            {\r\n                Cla" +
                    "uses.Add(Clause.New(ClauseType.ActionInsertValues, \"VALUES\", extra: parameters))" +
                    ";\r\n                return this;\r\n            }\r\n\r\n            public virtual ISq" +
                    "lMakerInsert Param(string paramName)\r\n            {\r\n                Clauses.Add" +
                    "(Clause.New(ClauseType.Parameter, name: paramName));\r\n                return thi" +
                    "s;\r\n            }\r\n            #endregion INSERT\r\n\r\n            #region UPDATE\r\n" +
                    "            public virtual ISqlMakerUpdate UPDATE(string tableName)\r\n           " +
                    " {\r\n                Clauses.Add(Clause.New(ClauseType.ActionUpdate, \"UPDATE\", na" +
                    "me: tableName));\r\n                return this;\r\n            }\r\n\r\n            pub" +
                    "lic virtual ISqlMakerUpdate SET(string columnsValues = null)\r\n            {\r\n   " +
                    "             Clauses.Add(Clause.New(ClauseType.ActionUpdateSet, \"SET\", extra: co" +
                    "lumnsValues));\r\n                return this;\r\n            }\r\n\r\n            publi" +
                    "c virtual ISqlMakerUpdate Val(string columnName, string parameterAliace)\r\n      " +
                    "      {\r\n                Clauses.Add(Clause.New(ClauseType.ActionUpdateValues, n" +
                    "ame: columnName, aliace: parameterAliace));\r\n                return this;\r\n     " +
                    "       }\r\n\r\n            ISqlMakerUpdate ISqlMakerUpdate.WHERE(string whereCondit" +
                    "ions)\r\n            {\r\n                Clauses.Add(Clause.New(ClauseType.ActionUp" +
                    "dateWhere, br + \"WHERE \", condition: whereConditions));\r\n                return " +
                    "this;\r\n            }\r\n\r\n            ISqlMakerUpdate ISqlMakerUpdate.WhereAnd(str" +
                    "ing whereConditions)\r\n            {\r\n                Clauses.Add(Clause.New(Clau" +
                    "seType.ActionUpdateWhere, brIndent + \"AND \", condition: whereConditions));\r\n    " +
                    "            return this;\r\n            }\r\n\r\n            ISqlMakerUpdate ISqlMaker" +
                    "Update.WhereOr(string whereConditions)\r\n            {\r\n                Clauses.A" +
                    "dd(Clause.New(ClauseType.ActionUpdateWhere, brIndent + \"OR \", condition: whereCo" +
                    "nditions));\r\n                return this;\r\n            }\r\n            #endregion" +
                    " UPDATE\r\n\r\n            #region DELETE\r\n            public virtual ISqlMakerDelet" +
                    "e DELETE(string tableName)\r\n            {\r\n                Clauses.Add(Clause.Ne" +
                    "w(ClauseType.ActionDelete, \"DELETE FROM\", name: tableName));\r\n                re" +
                    "turn this;\r\n            }\r\n\r\n            public virtual ISqlMakerDelete WHERE(st" +
                    "ring whereConditions)\r\n            {\r\n                Clauses.Add(Clause.New(Cla" +
                    "useType.ActionDeleteWhere, br + \"WHERE \", condition: whereConditions));\r\n       " +
                    "         return this;\r\n            }\r\n\r\n            public virtual ISqlMakerDele" +
                    "te WhereAnd(string whereConditions)\r\n            {\r\n                Clauses.Add(" +
                    "Clause.New(ClauseType.ActionDeleteWhere, brIndent + \"AND \", condition: whereCond" +
                    "itions));\r\n                return this;\r\n            }\r\n\r\n            public vir" +
                    "tual ISqlMakerDelete WhereOr(string whereConditions)\r\n            {\r\n           " +
                    "     Clauses.Add(Clause.New(ClauseType.ActionDeleteWhere, brIndent + \"OR \", cond" +
                    "ition: whereConditions));\r\n                return this;\r\n            }\r\n        " +
                    "    #endregion DELETE\r\n        }\r\n    }\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class SQLMakerBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
