<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using <#=GenerationContext.BaseNamespace#>.General.Interfaces;

namespace <#=GenerationContext.BaseNamespace#>.General
{
	public abstract class EnumBase<TEntity, TValue> : IEnumBase<EnumBase<TEntity, TValue>, TValue> where TEntity : EnumBase<TEntity, TValue>
	{
		#region Instance code

		public TValue Value { get; }
		public CommandType? CmdType { get; }
		public string Name { get;}

		protected EnumBase(string name, TValue enumValue, CommandType? cmdType = null)
		{
			Value = enumValue;
			Name = name;
			CmdType = cmdType;
			Mapping.Add(name, this);
		}

		public override string ToString() { return Name; }

		#endregion

		#region Static tools

		static private readonly Dictionary<string, EnumBase<TEntity, TValue>> Mapping;
		static EnumBase() { Mapping = new Dictionary<string, EnumBase<TEntity, TValue>>(); }

		protected static TEntity Parse(string name)
		{
			EnumBase<TEntity, TValue> result;
			if (Mapping.TryGetValue(name, out result))
			{
				return (TEntity)result;
			}

			throw new InvalidCastException();
		}

		protected static IEnumerable<TEntity> All { get { return Mapping.Values.AsEnumerable().Cast<TEntity>(); } }

		#endregion

		public override int GetHashCode()
		{
			return Value.GetHashCode();
		}
	}
}
