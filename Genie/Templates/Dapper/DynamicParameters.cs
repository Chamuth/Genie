// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Genie.Templates.Dapper
{
    using Genie.Base;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "F:\Projects\Genie\Genie\Templates\Dapper\DynamicParameters.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class DynamicParameters : DynamicParametersBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("namespace ");
            
            #line 3 "F:\Projects\Genie\Genie\Templates\Dapper\DynamicParameters.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BaseNamespace));
            
            #line default
            #line hidden
            this.Write(".Dapper\r\n{\r\n\t/// <summary>\r\n    /// A bag of parameters that can be passed to the" +
                    " Dapper Query and Execute methods\r\n    /// </summary>\r\n    public class DynamicP" +
                    "arameters : SqlMapper.IDynamicParameters\r\n    {\r\n        internal const DbType E" +
                    "numerableMultiParameter = (DbType)(-1);\r\n        static Dictionary<SqlMapper.Ide" +
                    "ntity, Action<IDbCommand, object>> paramReaderCache = new Dictionary<SqlMapper.I" +
                    "dentity, Action<IDbCommand, object>>();\r\n\r\n        Dictionary<string, ParamInfo>" +
                    " parameters = new Dictionary<string, ParamInfo>();\r\n        List<object> templat" +
                    "es;\r\n\r\n        partial class ParamInfo\r\n        {\r\n            public string Nam" +
                    "e { get; set; }\r\n            public object Value { get; set; }\r\n            publ" +
                    "ic ParameterDirection ParameterDirection { get; set; }\r\n            public DbTyp" +
                    "e? DbType { get; set; }\r\n            public int? Size { get; set; }\r\n           " +
                    " public IDbDataParameter AttachedParam { get; set; }\r\n        }\r\n\r\n        /// <" +
                    "summary>\r\n        /// construct a dynamic parameter bag\r\n        /// </summary>\r" +
                    "\n        public DynamicParameters() { }\r\n\r\n        /// <summary>\r\n        /// co" +
                    "nstruct a dynamic parameter bag\r\n        /// </summary>\r\n        /// <param name" +
                    "=\"template\">can be an anonymous type or a DynamicParameters bag</param>\r\n       " +
                    " public DynamicParameters(object template)\r\n        {\r\n            AddDynamicPar" +
                    "ams(template);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Append a whole o" +
                    "bject full of params to the dynamic\r\n        /// EG: AddDynamicParams(new {A = 1" +
                    ", B = 2}) // will add property A and B to the dynamic\r\n        /// </summary>\r\n " +
                    "       /// <param name=\"param\"></param>\r\n        public void AddDynamicParams(\r\n" +
                    "#if CSHARP30\r\n        object param\r\n#else\r\ndynamic param\r\n#endif\r\n)\r\n        {\r\n" +
                    "            var obj = param as object;\r\n            if (obj != null)\r\n          " +
                    "  {\r\n                var subDynamic = obj as DynamicParameters;\r\n               " +
                    " if (subDynamic == null)\r\n                {\r\n                    var dictionary " +
                    "= obj as IEnumerable<KeyValuePair<string, object>>;\r\n                    if (dic" +
                    "tionary == null)\r\n                    {\r\n                        templates = tem" +
                    "plates ?? new List<object>();\r\n                        templates.Add(obj);\r\n    " +
                    "                }\r\n                    else\r\n                    {\r\n            " +
                    "            foreach (var kvp in dictionary)\r\n                        {\r\n#if CSHA" +
                    "RP30\r\n                        Add(kvp.Key, kvp.Value, null, null, null);\r\n#else\r" +
                    "\n                            Add(kvp.Key, kvp.Value);\r\n#endif\r\n                 " +
                    "       }\r\n                    }\r\n                }\r\n                else\r\n      " +
                    "          {\r\n                    if (subDynamic.parameters != null)\r\n           " +
                    "         {\r\n                        foreach (var kvp in subDynamic.parameters)\r\n" +
                    "                        {\r\n                            parameters.Add(kvp.Key, k" +
                    "vp.Value);\r\n                        }\r\n                    }\r\n\r\n                " +
                    "    if (subDynamic.templates != null)\r\n                    {\r\n                  " +
                    "      templates = templates ?? new List<object>();\r\n                        fore" +
                    "ach (var t in subDynamic.templates)\r\n                        {\r\n                " +
                    "            templates.Add(t);\r\n                        }\r\n                    }\r" +
                    "\n                }\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /" +
                    "// Add a parameter to this dynamic parameter list\r\n        /// </summary>\r\n     " +
                    "   /// <param name=\"name\"></param>\r\n        /// <param name=\"value\"></param>\r\n  " +
                    "      /// <param name=\"dbType\"></param>\r\n        /// <param name=\"direction\"></p" +
                    "aram>\r\n        /// <param name=\"size\"></param>\r\n        public void Add(\r\n#if CS" +
                    "HARP30\r\n        string name, object value, DbType? dbType, ParameterDirection? d" +
                    "irection, int? size\r\n#else\r\nstring name, object value = null, DbType? dbType = n" +
                    "ull, ParameterDirection? direction = null, int? size = null\r\n#endif\r\n)\r\n        " +
                    "{\r\n            parameters[Clean(name)] = new ParamInfo() { Name = name, Value = " +
                    "value, ParameterDirection = direction ?? ParameterDirection.Input, DbType = dbTy" +
                    "pe, Size = size };\r\n        }\r\n\r\n        static string Clean(string name)\r\n     " +
                    "   {\r\n            if (!string.IsNullOrEmpty(name))\r\n            {\r\n             " +
                    "   switch (name[0])\r\n                {\r\n                    case \'@\':\r\n         " +
                    "           case \':\':\r\n                    case \'?\':\r\n                        ret" +
                    "urn name.Substring(1);\r\n                }\r\n            }\r\n            return nam" +
                    "e;\r\n        }\r\n\r\n        void SqlMapper.IDynamicParameters.AddParameters(IDbComm" +
                    "and command, SqlMapper.Identity identity)\r\n        {\r\n            AddParameters(" +
                    "command, identity);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Add all the" +
                    " parameters needed to the command just before it executes\r\n        /// </summary" +
                    ">\r\n        /// <param name=\"command\">The raw command prior to execution</param>\r" +
                    "\n        /// <param name=\"identity\">Information about the query</param>\r\n       " +
                    " void AddParameters(IDbCommand command, SqlMapper.Identity identity)\r\n        {\r" +
                    "\n            if (templates != null)\r\n            {\r\n                foreach (var" +
                    " template in templates)\r\n                {\r\n                    var newIdent = i" +
                    "dentity.ForDynamicParameters(template.GetType());\r\n                    Action<ID" +
                    "bCommand, object> appender;\r\n\r\n                    lock (paramReaderCache)\r\n    " +
                    "                {\r\n                        if (!paramReaderCache.TryGetValue(new" +
                    "Ident, out appender))\r\n                        {\r\n                            ap" +
                    "pender = SqlMapper.CreateParamInfoGenerator(newIdent, true);\r\n                  " +
                    "          paramReaderCache[newIdent] = appender;\r\n                        }\r\n   " +
                    "                 }\r\n\r\n                    appender(command, template);\r\n        " +
                    "        }\r\n            }\r\n\r\n            foreach (var param in parameters.Values)" +
                    "\r\n            {\r\n                var dbType = param.DbType;\r\n                var" +
                    " val = param.Value;\r\n                string name = Clean(param.Name);\r\n\r\n       " +
                    "         if (dbType == null && val != null) dbType = SqlMapper.LookupDbType(val." +
                    "GetType(), name);\r\n\r\n                if (dbType == DynamicParameters.EnumerableM" +
                    "ultiParameter)\r\n                {\r\n#pragma warning disable 612, 618\r\n           " +
                    "         SqlMapper.PackListParameters(command, name, val);\r\n#pragma warning rest" +
                    "ore 612, 618\r\n                }\r\n                else\r\n                {\r\n\r\n    " +
                    "                bool add = !command.Parameters.Contains(name);\r\n                " +
                    "    IDbDataParameter p;\r\n                    if (add)\r\n                    {\r\n  " +
                    "                      p = command.CreateParameter();\r\n                        p." +
                    "ParameterName = name;\r\n                    }\r\n                    else\r\n        " +
                    "            {\r\n                        p = (IDbDataParameter)command.Parameters[" +
                    "name];\r\n                    }\r\n\r\n                    p.Value = val ?? DBNull.Val" +
                    "ue;\r\n                    p.Direction = param.ParameterDirection;\r\n              " +
                    "      var s = val as string;\r\n                    if (s != null)\r\n              " +
                    "      {\r\n                        if (s.Length <= 4000)\r\n                        " +
                    "{\r\n                            p.Size = 4000;\r\n                        }\r\n      " +
                    "              }\r\n                    if (param.Size != null)\r\n                  " +
                    "  {\r\n                        p.Size = param.Size.Value;\r\n                    }\r\n" +
                    "                    if (dbType != null)\r\n                    {\r\n                " +
                    "        p.DbType = dbType.Value;\r\n                    }\r\n                    if " +
                    "(add)\r\n                    {\r\n                        command.Parameters.Add(p);" +
                    "\r\n                    }\r\n                    param.AttachedParam = p;\r\n         " +
                    "       }\r\n\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// All t" +
                    "he names of the param in the bag, use Get to yank them out\r\n        /// </summar" +
                    "y>\r\n        public IEnumerable<string> ParameterNames\r\n        {\r\n            ge" +
                    "t\r\n            {\r\n                return parameters.Select(p => p.Key);\r\n       " +
                    "     }\r\n        }\r\n\r\n\r\n        /// <summary>\r\n        /// Get the value of a par" +
                    "ameter\r\n        /// </summary>\r\n        /// <typeparam name=\"T\"></typeparam>\r\n  " +
                    "      /// <param name=\"name\"></param>\r\n        /// <returns>The value, note DBNu" +
                    "ll.Value is not returned, instead the value is returned as null</returns>\r\n     " +
                    "   public T Get<T>(string name)\r\n        {\r\n            var val = parameters[Cle" +
                    "an(name)].AttachedParam.Value;\r\n            if (val == DBNull.Value)\r\n          " +
                    "  {\r\n                if (default(T) != null)\r\n                {\r\n               " +
                    "     throw new ApplicationException(\"Attempting to cast a DBNull to a non nullab" +
                    "le type!\");\r\n                }\r\n                return default(T);\r\n            " +
                    "}\r\n            return (T)val;\r\n        }\r\n    }\r\n\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class DynamicParametersBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
