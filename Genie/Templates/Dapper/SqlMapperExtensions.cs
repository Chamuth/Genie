// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Genie.Templates.Dapper
{
    using Genie.Base;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "F:\Projects\Genie\Genie\Templates\Dapper\SqlMapperExtensions.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class SqlMapperExtensions : SqlMapperExtensionsBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("namespace ");
            
            #line 3 "F:\Projects\Genie\Genie\Templates\Dapper\SqlMapperExtensions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BaseNamespace));
            
            #line default
            #line hidden
            this.Write(".Dapper\r\n{\r\n\tpublic static class SqlMapperExtensions\r\n    {\r\n        public inter" +
                    "face IProxy\r\n        {\r\n            bool IsDirty { get; set; }\r\n        }\r\n\r\n\r\n " +
                    "       public class SqlWhereOrderCache\r\n        {\r\n            public string Sql" +
                    " { get; set; }\r\n            public IEnumerable<string> Where { get; set; }\r\n    " +
                    "        public IEnumerable<string> Order { get; set; }\r\n        }\r\n\r\n        pri" +
                    "vate static readonly ConcurrentDictionary<RuntimeTypeHandle, IEnumerable<Propert" +
                    "yInfo>> KeyProperties = new ConcurrentDictionary<RuntimeTypeHandle, IEnumerable<" +
                    "PropertyInfo>>();\r\n        private static readonly ConcurrentDictionary<RuntimeT" +
                    "ypeHandle, IEnumerable<PropertyInfo>> TypeProperties = new ConcurrentDictionary<" +
                    "RuntimeTypeHandle, IEnumerable<PropertyInfo>>();\r\n        private static readonl" +
                    "y ConcurrentDictionary<RuntimeTypeHandle, string> GetQueries = new ConcurrentDic" +
                    "tionary<RuntimeTypeHandle, string>();\r\n        private static readonly Concurren" +
                    "tDictionary<RuntimeTypeHandle, string> TypeTableName = new ConcurrentDictionary<" +
                    "RuntimeTypeHandle, string>();\r\n        private static readonly ConcurrentDiction" +
                    "ary<RuntimeTypeHandle, string> GetQueriesAll = new ConcurrentDictionary<RuntimeT" +
                    "ypeHandle, string>();\r\n        private static readonly ConcurrentDictionary<int," +
                    " SqlWhereOrderCache> GetQueriesWhereOrder = new ConcurrentDictionary<int, SqlWhe" +
                    "reOrderCache>();\r\n\r\n\r\n        private static readonly Dictionary<string, ISqlAda" +
                    "pter> AdapterDictionary = new Dictionary<string, ISqlAdapter>() {\r\n             " +
                    "                                                                           {\"sql" +
                    "connection\", new SqlServerAdapter()},\r\n                                         " +
                    "                                               {\"npgsqlconnection\", new Postgres" +
                    "Adapter()}\r\n                                                                    " +
                    "                };\r\n\r\n        private static IEnumerable<PropertyInfo> KeyProper" +
                    "tiesCache(Type type)\r\n        {\r\n\r\n            IEnumerable<PropertyInfo> pi;\r\n  " +
                    "          if (KeyProperties.TryGetValue(type.TypeHandle, out pi))\r\n            {" +
                    "\r\n                return pi;\r\n            }\r\n\r\n            var allProperties = T" +
                    "ypePropertiesCache(type);\r\n            var keyProperties = allProperties.Where(p" +
                    " => p.GetCustomAttributes(true).Any(a => a is KeyAttribute)).ToList();\r\n\r\n      " +
                    "      if (keyProperties.Count == 0)\r\n            {\r\n                var idProp =" +
                    " allProperties.Where(p => p.Name.ToLower() == \"id\").FirstOrDefault();\r\n         " +
                    "       if (idProp != null)\r\n                {\r\n                    keyProperties" +
                    ".Add(idProp);\r\n                }\r\n            }\r\n\r\n            KeyProperties[typ" +
                    "e.TypeHandle] = keyProperties;\r\n            return keyProperties;\r\n        }\r\n  " +
                    "      private static IEnumerable<PropertyInfo> TypePropertiesCache(Type type)\r\n " +
                    "       {\r\n            IEnumerable<PropertyInfo> pis;\r\n            if (TypeProper" +
                    "ties.TryGetValue(type.TypeHandle, out pis))\r\n            {\r\n                retu" +
                    "rn pis;\r\n            }\r\n\r\n            var properties = type.GetProperties().Wher" +
                    "e(IsWriteable);\r\n            TypeProperties[type.TypeHandle] = properties;\r\n    " +
                    "        return properties;\r\n        }\r\n\r\n        public static bool IsWriteable(" +
                    "PropertyInfo pi)\r\n        {\r\n            object[] attributes = pi.GetCustomAttri" +
                    "butes(typeof(WriteAttribute), false);\r\n            if (attributes.Length == 1)\r\n" +
                    "            {\r\n                WriteAttribute write = (WriteAttribute)attributes" +
                    "[0];\r\n                return write.Write;\r\n            }\r\n            return tru" +
                    "e;\r\n        }\r\n\r\n\r\n        /// <summary>\r\n        /// </summary>\r\n        /// <t" +
                    "ypeparam name=\"T\">Interface type to create and populate</typeparam>\r\n        ///" +
                    " <param name=\"connection\">Open SqlConnection</param>\r\n        /// <param name=\"t" +
                    "ransaction\"></param>\r\n        /// <param name=\"commandTimeout\"></param>\r\n       " +
                    " /// <returns>Entity of T</returns>\r\n        public static IEnumerable<T> GetAll" +
                    "<T>(this IDbConnection connection, IDbTransaction transaction = null, int? comma" +
                    "ndTimeout = null) where T : class\r\n        {\r\n            var type = typeof(T);\r" +
                    "\n            string sql;\r\n            if (!GetQueriesAll.TryGetValue(type.TypeHa" +
                    "ndle, out sql))\r\n            {\r\n                var name = GetTableName(type);\r\n" +
                    "\r\n                // TODO: pluralizer \r\n                // TODO: query informati" +
                    "on schema and only select fields that are both in information schema and underly" +
                    "ing class / interface \r\n                sql = string.Format(\"select * from {0}\"," +
                    " name);\r\n                GetQueriesAll[type.TypeHandle] = sql;\r\n            }\r\n\r" +
                    "\n            IEnumerable<T> obj = null;\r\n\r\n            if (type.IsInterface)\r\n  " +
                    "          {\r\n                var res = connection.Query(sql);\r\n                i" +
                    "f (!res.Any())\r\n                    return (IEnumerable<T>)((object)null);\r\n    " +
                    "            var objList = new List<T>();\r\n                foreach (var item in r" +
                    "es)\r\n                {\r\n                    T objItem = ProxyGenerator.GetInterf" +
                    "aceProxy<T>();\r\n\r\n                    foreach (var property in TypePropertiesCac" +
                    "he(type))\r\n                    {\r\n                        var val = item[propert" +
                    "y.Name];\r\n                        property.SetValue(objItem, val, null);\r\n      " +
                    "              }\r\n\r\n                    ((IProxy)objItem).IsDirty = false;   //re" +
                    "set change tracking and return   \r\n                    objList.Add(objItem);\r\n  " +
                    "              }\r\n                obj = objList.AsEnumerable();\r\n            }\r\n " +
                    "           else\r\n            {\r\n                obj = connection.Query<T>(sql, t" +
                    "ransaction: transaction, commandTimeout: commandTimeout);\r\n            }\r\n      " +
                    "      return obj;\r\n        }\r\n\r\n        /// <summary>\r\n        /// </summary>\r\n " +
                    "       /// <typeparam name=\"T\">Interface type to create and populate</typeparam>" +
                    "\r\n        /// <param name=\"connection\">Open SqlConnection</param>\r\n        /// <" +
                    "param name=\"where\"></param>\r\n        /// <param name=\"order\"></param>\r\n        /" +
                    "// <returns>Entity of T</returns>\r\n        public static IEnumerable<T> GetBy<T>" +
                    "(this IDbConnection connection, object where = null, object order = null, IDbTra" +
                    "nsaction transaction = null, int? commandTimeout = null) where T : class\r\n      " +
                    "  {\r\n            var type = typeof(T);\r\n            var isUseWhere = where != nu" +
                    "ll;\r\n            var isUseOrder = order != null;\r\n            if (!isUseWhere &&" +
                    " !isUseOrder)\r\n            {\r\n                return GetAll<T>(connection: conne" +
                    "ction, transaction: transaction, commandTimeout: commandTimeout);\r\n            }" +
                    "\r\n            var whereType = isUseWhere ? where.GetType() : null;\r\n            " +
                    "var orderType = isUseOrder ? order.GetType() : null;\r\n            SqlWhereOrderC" +
                    "ache cache;\r\n            var key = GetKeyTypeWhereOrder(type, whereType, orderTy" +
                    "pe);\r\n            if (!GetQueriesWhereOrder.TryGetValue(key, out cache))\r\n      " +
                    "      {\r\n                cache = new SqlWhereOrderCache();\r\n                if (" +
                    "isUseWhere)\r\n                {\r\n                    cache.Where = GetListOfNames" +
                    "(whereType.GetProperties());\r\n                }\r\n                if (isUseOrder)" +
                    "\r\n                {\r\n                    cache.Order = GetListOfNames(orderType." +
                    "GetProperties());\r\n                }\r\n                var name = GetTableName(ty" +
                    "pe);\r\n                StringBuilder sb = new StringBuilder();\r\n                s" +
                    "b.AppendFormat(\"select * from {0}\", name);\r\n                int cnt, last, i;\r\n " +
                    "               if (isUseWhere)\r\n                {\r\n                    sb.Append" +
                    "(\" where \");\r\n                    cnt = cache.Where.Count();\r\n                  " +
                    "  last = cnt - 1;\r\n                    for (i = 0; i < cnt; i++)\r\n              " +
                    "      {\r\n                        var prop = cache.Where.ElementAt(i);\r\n         " +
                    "               sb.AppendFormat(\"[{0}]=@{1}\", prop, prop);\r\n                     " +
                    "   if (i != last)\r\n                        {\r\n                            sb.App" +
                    "end(\" and \");\r\n                        }\r\n\r\n                    }\r\n             " +
                    "   }\r\n                if (isUseOrder)\r\n                {\r\n                    sb" +
                    ".Append(\" order by \");\r\n                    cnt = cache.Order.Count();\r\n        " +
                    "            last = cnt - 1;\r\n                    for (i = 0; i < cnt; i++)\r\n    " +
                    "                {\r\n                        var prop = cache.Order.ElementAt(i);\r" +
                    "\n                        sb.AppendFormat(\"[{0}] #{1}\", prop, prop);\r\n           " +
                    "             if (i != last)\r\n                        {\r\n                        " +
                    "    sb.Append(\", \");\r\n                        }\r\n                    }\r\n        " +
                    "        }\r\n\r\n                // TODO: pluralizer \r\n                // TODO: quer" +
                    "y information schema and only select fields that are both in information schema " +
                    "and underlying class / interface \r\n                cache.Sql = sb.ToString();\r\n " +
                    "               GetQueriesWhereOrder[key] = cache;\r\n            }\r\n\r\n            " +
                    "IEnumerable<T> obj = null;\r\n            var dynParms = new DynamicParameters();\r" +
                    "\n            if (isUseWhere)\r\n            {\r\n                foreach (string nam" +
                    "e in cache.Where)\r\n                {\r\n                    dynParms.Add(name, whe" +
                    "reType.GetProperty(name).GetValue(where, null));\r\n                }\r\n           " +
                    " }\r\n            if (isUseOrder)\r\n            {\r\n                foreach (string " +
                    "name in cache.Order)\r\n                {\r\n                    SortAs enumVal = (S" +
                    "ortAs)orderType.GetProperty(name).GetValue(order, null);\r\n                    sw" +
                    "itch (enumVal)\r\n                    {\r\n                        case SortAs.Asc:\r" +
                    "\n                            cache.Sql = cache.Sql.Replace(\"#\" + name, \"ASC\");\r\n" +
                    "                            break;\r\n                        case SortAs.Desc:\r\n " +
                    "                           cache.Sql = cache.Sql.Replace(\"#\" + name, \"DESC\");\r\n " +
                    "                           break;\r\n                        default:\r\n           " +
                    "                 throw new ArgumentOutOfRangeException();\r\n                    }" +
                    "\r\n                }\r\n            }\r\n            if (type.IsInterface)\r\n         " +
                    "   {\r\n                var res = connection.Query(cache.Sql);\r\n                if" +
                    " (!res.Any())\r\n                    return (IEnumerable<T>)((object)null);\r\n     " +
                    "           var objList = new List<T>();\r\n                foreach (var item in re" +
                    "s)\r\n                {\r\n                    T objItem = ProxyGenerator.GetInterfa" +
                    "ceProxy<T>();\r\n\r\n                    foreach (var property in TypePropertiesCach" +
                    "e(type))\r\n                    {\r\n                        var val = item[property" +
                    ".Name];\r\n                        property.SetValue(objItem, val, null);\r\n       " +
                    "             }\r\n\r\n                    ((IProxy)objItem).IsDirty = false;   //res" +
                    "et change tracking and return   \r\n                    objList.Add(objItem);\r\n   " +
                    "             }\r\n                obj = objList.AsEnumerable();\r\n            }\r\n  " +
                    "          else\r\n            {\r\n                obj = connection.Query<T>(cache.S" +
                    "ql, dynParms, transaction: transaction, commandTimeout: commandTimeout);\r\n      " +
                    "      }\r\n            return obj;\r\n        }\r\n\r\n        /// <summary>\r\n        //" +
                    "/ Returns a single entity by a single id from table \"Ts\". T must be of interface" +
                    " type. \r\n        /// Id must be marked with [Key] attribute.\r\n        /// Create" +
                    "d entity is tracked/intercepted for changes and used by the Update() extension. " +
                    "\r\n        /// </summary>\r\n        /// <typeparam name=\"T\">Interface type to crea" +
                    "te and populate</typeparam>\r\n        /// <param name=\"connection\">Open SqlConnec" +
                    "tion</param>\r\n        /// <param name=\"id\">Id of the entity to get, must be mark" +
                    "ed with [Key] attribute</param>\r\n        /// <returns>Entity of T</returns>\r\n   " +
                    "     public static T Get<T>(this IDbConnection connection, dynamic id, IDbTransa" +
                    "ction transaction = null, int? commandTimeout = null) where T : BaseModel\r\n     " +
                    "   {\r\n            var type = typeof(T);\r\n            string sql;\r\n            if" +
                    " (!GetQueries.TryGetValue(type.TypeHandle, out sql))\r\n            {\r\n           " +
                    "     var keys = KeyPropertiesCache(type);\r\n                if (keys.Count() > 1)" +
                    "\r\n                    throw new DataException(\"Get<T> only supports an entity wi" +
                    "th a single [Key] property\");\r\n                if (keys.Count() == 0)\r\n         " +
                    "           throw new DataException(\"Get<T> only supports en entity with a [Key] " +
                    "property\");\r\n\r\n                var onlyKey = keys.First();\r\n\r\n                va" +
                    "r name = GetTableName(type);\r\n\r\n                // TODO: pluralizer \r\n          " +
                    "      // TODO: query information schema and only select fields that are both in " +
                    "information schema and underlying class / interface \r\n                sql = \"sel" +
                    "ect * from \" + name + \" where [\" + onlyKey.Name + \"] = @id\";\r\n                Ge" +
                    "tQueries[type.TypeHandle] = sql;\r\n            }\r\n\r\n            var dynParms = ne" +
                    "w DynamicParameters();\r\n            dynParms.Add(\"@id\", id);\r\n\r\n            T ob" +
                    "j = null;\r\n\r\n            if (type.IsInterface)\r\n            {\r\n                v" +
                    "ar res = connection.Query(sql, dynParms).FirstOrDefault() as IDictionary<string," +
                    " object>;\r\n\r\n                if (res == null)\r\n                    return (T)((o" +
                    "bject)null);\r\n\r\n                obj = ProxyGenerator.GetInterfaceProxy<T>();\r\n\r\n" +
                    "                foreach (var property in TypePropertiesCache(type))\r\n           " +
                    "     {\r\n                    var val = res[property.Name];\r\n                    p" +
                    "roperty.SetValue(obj, val, null);\r\n                }\r\n\r\n                ((IProxy" +
                    ")obj).IsDirty = false;   //reset change tracking and return\r\n            }\r\n    " +
                    "        else\r\n            {\r\n                obj = connection.Query<T>(sql, dynP" +
                    "arms, transaction: transaction, commandTimeout: commandTimeout).FirstOrDefault()" +
                    ";\r\n            }\r\n            return obj;\r\n        }\r\n\r\n        private static i" +
                    "nt GetKeyTypeWhereOrder(Type type, Type where, Type order)\r\n        {\r\n         " +
                    "   var handler = type.TypeHandle;\r\n            string whereCondition = @where !=" +
                    " null ? @where.TypeHandle.Value.ToString() : string.Empty;\r\n            string o" +
                    "rderCondition = order != null ? order.TypeHandle.Value.ToString() : string.Empty" +
                    "; ;\r\n            var str = string.Format(\"{0}{1}{2}\", handler.Value, whereCondit" +
                    "ion, orderCondition);\r\n            return str.GetHashCode();\r\n        }\r\n\r\n     " +
                    "   private static IEnumerable<string> GetListOfNames(PropertyInfo[] list)\r\n     " +
                    "   {\r\n            List<string> lst = new List<string>();\r\n            foreach (P" +
                    "ropertyInfo info in list)\r\n            {\r\n                lst.Add(info.Name);\r\n " +
                    "           }\r\n            return lst.AsEnumerable();\r\n        }\r\n\r\n        priva" +
                    "te static string GetTableName(Type type)\r\n        {\r\n            string name;\r\n " +
                    "           if (!TypeTableName.TryGetValue(type.TypeHandle, out name))\r\n         " +
                    "   {\r\n                name = type.Name + \"s\";\r\n                if (type.IsInterf" +
                    "ace && name.StartsWith(\"I\"))\r\n                    name = name.Substring(1);\r\n\r\n " +
                    "               //NOTE: This as dynamic trick should be able to handle both our o" +
                    "wn Table-attribute as well as the one in EntityFramework \r\n                var t" +
                    "ableattr = type.GetCustomAttributes(false).Where(attr => attr.GetType().Name == " +
                    "\"TableAttribute\").SingleOrDefault() as\r\n                    dynamic;\r\n          " +
                    "      if (tableattr != null)\r\n                    name = tableattr.Name;\r\n      " +
                    "          TypeTableName[type.TypeHandle] = name;\r\n            }\r\n            ret" +
                    "urn name;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Inserts an entity int" +
                    "o table \"Ts\" and returns identity id.\r\n        /// </summary>\r\n        /// <para" +
                    "m name=\"connection\">Open SqlConnection</param>\r\n        /// <param name=\"entityT" +
                    "oInsert\">Entity to insert</param>\r\n        /// <returns>Identity of inserted ent" +
                    "ity</returns>\r\n        public static long Insert<T>(this IDbConnection connectio" +
                    "n, T entityToInsert, IDbTransaction transaction = null, int? commandTimeout = nu" +
                    "ll) where T : class\r\n        {\r\n\r\n            var type = typeof(T);\r\n\r\n         " +
                    "   var name = GetTableName(type);\r\n\r\n            var sbColumnList = new StringBu" +
                    "ilder(null);\r\n\r\n            var allProperties = TypePropertiesCache(type);\r\n    " +
                    "        var keyProperties = KeyPropertiesCache(type);\r\n            var allProper" +
                    "tiesExceptKey = allProperties.Except(keyProperties);\r\n\r\n            for (var i =" +
                    " 0; i < allPropertiesExceptKey.Count(); i++)\r\n            {\r\n                var" +
                    " property = allPropertiesExceptKey.ElementAt(i);\r\n                sbColumnList.A" +
                    "ppendFormat(\"[{0}]\", property.Name);\r\n                if (i < allPropertiesExcep" +
                    "tKey.Count() - 1)\r\n                    sbColumnList.Append(\", \");\r\n            }" +
                    "\r\n\r\n            var sbParameterList = new StringBuilder(null);\r\n            for " +
                    "(var i = 0; i < allPropertiesExceptKey.Count(); i++)\r\n            {\r\n           " +
                    "     var property = allPropertiesExceptKey.ElementAt(i);\r\n                sbPara" +
                    "meterList.AppendFormat(\"@{0}\", property.Name);\r\n                if (i < allPrope" +
                    "rtiesExceptKey.Count() - 1)\r\n                    sbParameterList.Append(\", \");\r\n" +
                    "            }\r\n            ISqlAdapter adapter = GetFormatter(connection);\r\n    " +
                    "        int id = adapter.Insert(connection, transaction, commandTimeout, name, s" +
                    "bColumnList.ToString(), sbParameterList.ToString(), keyProperties, entityToInser" +
                    "t);\r\n            return id;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Upd" +
                    "ates entity in table \"Ts\", checks if the entity is modified if the entity is tra" +
                    "cked by the Get() extension.\r\n        /// </summary>\r\n        /// <typeparam nam" +
                    "e=\"T\">Type to be updated</typeparam>\r\n        /// <param name=\"connection\">Open " +
                    "SqlConnection</param>\r\n        /// <param name=\"entityToUpdate\">Entity to be upd" +
                    "ated</param>\r\n        /// <returns>true if updated, false if not found or not mo" +
                    "dified (tracked entities)</returns>\r\n        public static bool Update<T>(this I" +
                    "DbConnection connection, T entityToUpdate, IDbTransaction transaction = null, in" +
                    "t? commandTimeout = null) where T : BaseModel\r\n        {\r\n            if (entity" +
                    "ToUpdate.DatabaseModelStatus != ModelStatus.Retrieved)\r\n                return f" +
                    "alse;\r\n\r\n            if (entityToUpdate.UpdatedProperties.Count < 1)\r\n          " +
                    "      return false;\r\n\r\n            var type = typeof(T);\r\n\r\n            var keyP" +
                    "roperties = KeyPropertiesCache(type).ToList();\r\n            if (!keyProperties.A" +
                    "ny())\r\n                throw new ArgumentException(\"Entity must have at least on" +
                    "e [Key] property\");\r\n\r\n            var name = GetTableName(type);\r\n\r\n           " +
                    " var sb = new StringBuilder();\r\n            sb.AppendFormat(\"update {0} set \", n" +
                    "ame);\r\n\r\n            var allProperties = TypePropertiesCache(type);\r\n           " +
                    " var nonIdProps = allProperties.Where(a => !keyProperties.Contains(a) && entityT" +
                    "oUpdate.UpdatedProperties.Contains(a.Name)).ToList(); // Only updated properties" +
                    "\r\n\r\n\r\n            for (var i = 0; i < nonIdProps.Count(); i++)\r\n            {\r\n " +
                    "               var property = nonIdProps.ElementAt(i);\r\n                sb.Appen" +
                    "dFormat(\"[{0}] = @{1}\", property.Name, property.Name);\r\n                if (i < " +
                    "nonIdProps.Count() - 1)\r\n                    sb.AppendFormat(\", \");\r\n           " +
                    " }\r\n\r\n            sb.Append(\" where \");\r\n            for (var i = 0; i < keyProp" +
                    "erties.Count(); i++)\r\n            {\r\n                var property = keyPropertie" +
                    "s.ElementAt(i);\r\n                sb.AppendFormat(\"[{0}] = @{1}\", property.Name, " +
                    "property.Name);\r\n                if (i < keyProperties.Count() - 1)\r\n           " +
                    "         sb.AppendFormat(\" and \");\r\n            }\r\n            var updated = con" +
                    "nection.Execute(sb.ToString(), entityToUpdate, commandTimeout: commandTimeout, t" +
                    "ransaction: transaction);\r\n            return updated > 0;\r\n        }\r\n\r\n       " +
                    " /// <summary>\r\n        /// Delete entity in table \"Ts\".\r\n        /// </summary>" +
                    "\r\n        /// <typeparam name=\"T\">Type of entity</typeparam>\r\n        /// <param" +
                    " name=\"connection\">Open SqlConnection</param>\r\n        /// <param name=\"entityTo" +
                    "Delete\">Entity to delete</param>\r\n        /// <returns>true if deleted, false if" +
                    " not found</returns>\r\n        public static bool Delete<T>(this IDbConnection co" +
                    "nnection, T entityToDelete, IDbTransaction transaction = null, int? commandTimeo" +
                    "ut = null) where T : BaseModel\r\n        {\r\n            if (entityToDelete == nul" +
                    "l)\r\n                throw new ArgumentException(\"Cannot Delete null Object\", \"en" +
                    "tityToDelete\");\r\n\r\n            var type = typeof(T);\r\n\r\n            var keyPrope" +
                    "rties = KeyPropertiesCache(type).ToList();\r\n\r\n            if (!keyProperties.Any" +
                    "())\r\n                throw new ArgumentException(\"Entity must have at least one " +
                    "[Key] property\");\r\n\r\n            var name = GetTableName(type);\r\n\r\n            v" +
                    "ar sb = new StringBuilder();\r\n            sb.AppendFormat(\"delete from {0} where" +
                    " \", name);\r\n\r\n            for (var i = 0; i < keyProperties.Count(); i++)\r\n     " +
                    "       {\r\n                var property = keyProperties.ElementAt(i);\r\n          " +
                    "      sb.AppendFormat(\"[{0}] = @{1}\", property.Name, property.Name);\r\n          " +
                    "      if (i < keyProperties.Count() - 1)\r\n                    sb.AppendFormat(\" " +
                    "and \");\r\n            }\r\n            var deleted = connection.Execute(sb.ToString" +
                    "(), entityToDelete, transaction: transaction, commandTimeout: commandTimeout) > " +
                    "0;\r\n            if(deleted) { entityToDelete.DatabaseModelStatus = ModelStatus.D" +
                    "eleted; }\r\n            return deleted;\r\n        }\r\n\r\n        public static ISqlA" +
                    "dapter GetFormatter(IDbConnection connection)\r\n        {\r\n            string nam" +
                    "e = connection.GetType().Name.ToLower();\r\n            if (!AdapterDictionary.Con" +
                    "tainsKey(name))\r\n                return new SqlServerAdapter();\r\n            ret" +
                    "urn AdapterDictionary[name];\r\n        }\r\n\r\n        class ProxyGenerator\r\n       " +
                    " {\r\n            private static readonly Dictionary<Type, object> TypeCache = new" +
                    " Dictionary<Type, object>();\r\n\r\n            private static AssemblyBuilder GetAs" +
                    "mBuilder(string name)\r\n            {\r\n                var assemblyBuilder = Thre" +
                    "ad.GetDomain().DefineDynamicAssembly(new AssemblyName { Name = name },\r\n        " +
                    "            AssemblyBuilderAccess.Run);       //NOTE: to save, use RunAndSave\r\n\r" +
                    "\n                return assemblyBuilder;\r\n            }\r\n\r\n            public st" +
                    "atic T GetClassProxy<T>()\r\n            {\r\n                // A class proxy could" +
                    " be implemented if all properties are virtual\r\n                //  otherwise the" +
                    "re is a pretty dangerous case where internal actions will not update dirty track" +
                    "ing\r\n                throw new NotImplementedException();\r\n            }\r\n\r\n\r\n  " +
                    "          public static T GetInterfaceProxy<T>()\r\n            {\r\n               " +
                    " Type typeOfT = typeof(T);\r\n\r\n                object k;\r\n                if (Typ" +
                    "eCache.TryGetValue(typeOfT, out k))\r\n                {\r\n                    retu" +
                    "rn (T)k;\r\n                }\r\n                var assemblyBuilder = GetAsmBuilder" +
                    "(typeOfT.Name);\r\n\r\n                var moduleBuilder = assemblyBuilder.DefineDyn" +
                    "amicModule(\"SqlMapperExtensions.\" + typeOfT.Name); //NOTE: to save, add \"asdasd." +
                    "dll\" parameter\r\n\r\n                var interfaceType = typeof(IProxy);\r\n         " +
                    "       var typeBuilder = moduleBuilder.DefineType(typeOfT.Name + \"_\" + Guid.NewG" +
                    "uid(),\r\n                    TypeAttributes.Public | TypeAttributes.Class);\r\n    " +
                    "            typeBuilder.AddInterfaceImplementation(typeOfT);\r\n                ty" +
                    "peBuilder.AddInterfaceImplementation(interfaceType);\r\n\r\n                //create" +
                    " our _isDirty field, which implements IProxy\r\n                var setIsDirtyMeth" +
                    "od = CreateIsDirtyProperty(typeBuilder);\r\n\r\n                // Generate a field " +
                    "for each property, which implements the T\r\n                foreach (var property" +
                    " in typeof(T).GetProperties())\r\n                {\r\n                    var isId " +
                    "= property.GetCustomAttributes(true).Any(a => a is KeyAttribute);\r\n             " +
                    "       CreateProperty<T>(typeBuilder, property.Name, property.PropertyType, setI" +
                    "sDirtyMethod, isId);\r\n                }\r\n\r\n                var generatedType = t" +
                    "ypeBuilder.CreateType();\r\n\r\n                //assemblyBuilder.Save(name + \".dll\"" +
                    ");  //NOTE: to save, uncomment\r\n\r\n                var generatedObject = Activato" +
                    "r.CreateInstance(generatedType);\r\n\r\n                TypeCache.Add(typeOfT, gener" +
                    "atedObject);\r\n                return (T)generatedObject;\r\n            }\r\n\r\n\r\n   " +
                    "         private static MethodInfo CreateIsDirtyProperty(TypeBuilder typeBuilder" +
                    ")\r\n            {\r\n                var propType = typeof(bool);\r\n                " +
                    "var field = typeBuilder.DefineField(\"_\" + \"IsDirty\", propType, FieldAttributes.P" +
                    "rivate);\r\n                var property = typeBuilder.DefineProperty(\"IsDirty\",\r\n" +
                    "                                                System.Reflection.PropertyAttrib" +
                    "utes.None,\r\n                                                propType,\r\n         " +
                    "                                       new Type[] { propType });\r\n\r\n            " +
                    "    const MethodAttributes getSetAttr = MethodAttributes.Public | MethodAttribut" +
                    "es.NewSlot | MethodAttributes.SpecialName |\r\n                                   " +
                    "                 MethodAttributes.Final | MethodAttributes.Virtual | MethodAttri" +
                    "butes.HideBySig;\r\n\r\n                // Define the \"get\" and \"set\" accessor metho" +
                    "ds\r\n                var currGetPropMthdBldr = typeBuilder.DefineMethod(\"get_\" + " +
                    "\"IsDirty\",\r\n                                                getSetAttr,\r\n       " +
                    "                                         propType,\r\n                            " +
                    "                    Type.EmptyTypes);\r\n                var currGetIL = currGetPr" +
                    "opMthdBldr.GetILGenerator();\r\n                currGetIL.Emit(OpCodes.Ldarg_0);\r\n" +
                    "                currGetIL.Emit(OpCodes.Ldfld, field);\r\n                currGetIL" +
                    ".Emit(OpCodes.Ret);\r\n                var currSetPropMthdBldr = typeBuilder.Defin" +
                    "eMethod(\"set_\" + \"IsDirty\",\r\n                                                get" +
                    "SetAttr,\r\n                                                null,\r\n               " +
                    "                                 new Type[] { propType });\r\n                var " +
                    "currSetIL = currSetPropMthdBldr.GetILGenerator();\r\n                currSetIL.Emi" +
                    "t(OpCodes.Ldarg_0);\r\n                currSetIL.Emit(OpCodes.Ldarg_1);\r\n         " +
                    "       currSetIL.Emit(OpCodes.Stfld, field);\r\n                currSetIL.Emit(OpC" +
                    "odes.Ret);\r\n\r\n                property.SetGetMethod(currGetPropMthdBldr);\r\n     " +
                    "           property.SetSetMethod(currSetPropMthdBldr);\r\n                var getM" +
                    "ethod = typeof(IProxy).GetMethod(\"get_\" + \"IsDirty\");\r\n                var setMe" +
                    "thod = typeof(IProxy).GetMethod(\"set_\" + \"IsDirty\");\r\n                typeBuilde" +
                    "r.DefineMethodOverride(currGetPropMthdBldr, getMethod);\r\n                typeBui" +
                    "lder.DefineMethodOverride(currSetPropMthdBldr, setMethod);\r\n\r\n                re" +
                    "turn currSetPropMthdBldr;\r\n            }\r\n\r\n            private static void Crea" +
                    "teProperty<T>(TypeBuilder typeBuilder, string propertyName, Type propType, Metho" +
                    "dInfo setIsDirtyMethod, bool isIdentity)\r\n            {\r\n                //Defin" +
                    "e the field and the property \r\n                var field = typeBuilder.DefineFie" +
                    "ld(\"_\" + propertyName, propType, FieldAttributes.Private);\r\n                var " +
                    "property = typeBuilder.DefineProperty(propertyName,\r\n                           " +
                    "                     System.Reflection.PropertyAttributes.None,\r\n               " +
                    "                                 propType,\r\n                                    " +
                    "            new Type[] { propType });\r\n\r\n                const MethodAttributes " +
                    "getSetAttr = MethodAttributes.Public | MethodAttributes.Virtual |\r\n             " +
                    "                                       MethodAttributes.HideBySig;\r\n\r\n          " +
                    "      // Define the \"get\" and \"set\" accessor methods\r\n                var currGe" +
                    "tPropMthdBldr = typeBuilder.DefineMethod(\"get_\" + propertyName,\r\n               " +
                    "                                 getSetAttr,\r\n                                  " +
                    "              propType,\r\n                                                Type.Em" +
                    "ptyTypes);\r\n\r\n                var currGetIL = currGetPropMthdBldr.GetILGenerator" +
                    "();\r\n                currGetIL.Emit(OpCodes.Ldarg_0);\r\n                currGetIL" +
                    ".Emit(OpCodes.Ldfld, field);\r\n                currGetIL.Emit(OpCodes.Ret);\r\n\r\n  " +
                    "              var currSetPropMthdBldr = typeBuilder.DefineMethod(\"set_\" + proper" +
                    "tyName,\r\n                                                getSetAttr,\r\n          " +
                    "                                      null,\r\n                                   " +
                    "             new Type[] { propType });\r\n\r\n                //store value in priva" +
                    "te field and set the isdirty flag\r\n                var currSetIL = currSetPropMt" +
                    "hdBldr.GetILGenerator();\r\n                currSetIL.Emit(OpCodes.Ldarg_0);\r\n    " +
                    "            currSetIL.Emit(OpCodes.Ldarg_1);\r\n                currSetIL.Emit(OpC" +
                    "odes.Stfld, field);\r\n                currSetIL.Emit(OpCodes.Ldarg_0);\r\n         " +
                    "       currSetIL.Emit(OpCodes.Ldc_I4_1);\r\n                currSetIL.Emit(OpCodes" +
                    ".Call, setIsDirtyMethod);\r\n                currSetIL.Emit(OpCodes.Ret);\r\n\r\n     " +
                    "           //TODO: Should copy all attributes defined by the interface?\r\n       " +
                    "         if (isIdentity)\r\n                {\r\n                    var keyAttribut" +
                    "e = typeof(KeyAttribute);\r\n                    var myConstructorInfo = keyAttrib" +
                    "ute.GetConstructor(new Type[] { });\r\n                    var attributeBuilder = " +
                    "new CustomAttributeBuilder(myConstructorInfo, new object[] { });\r\n              " +
                    "      property.SetCustomAttribute(attributeBuilder);\r\n                }\r\n\r\n     " +
                    "           property.SetGetMethod(currGetPropMthdBldr);\r\n                property" +
                    ".SetSetMethod(currSetPropMthdBldr);\r\n                var getMethod = typeof(T).G" +
                    "etMethod(\"get_\" + propertyName);\r\n                var setMethod = typeof(T).GetM" +
                    "ethod(\"set_\" + propertyName);\r\n                typeBuilder.DefineMethodOverride(" +
                    "currGetPropMthdBldr, getMethod);\r\n                typeBuilder.DefineMethodOverri" +
                    "de(currSetPropMthdBldr, setMethod);\r\n            }\r\n\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class SqlMapperExtensionsBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
