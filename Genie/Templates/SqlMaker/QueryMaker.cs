// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Genie.Templates.SqlMaker
{
    using Genie.Base;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "F:\Projects\Genie\Genie\Templates\SqlMaker\QueryMaker.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class QueryMaker : QueryMakerBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Syste" +
                    "m.Text;\r\nusing ");
            
            #line 7 "F:\Projects\Genie\Genie\Templates\SqlMaker\QueryMaker.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.baseNamespace));
            
            #line default
            #line hidden
            this.Write(".Infrastructure.Enum;\r\nusing ");
            
            #line 8 "F:\Projects\Genie\Genie\Templates\SqlMaker\QueryMaker.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.baseNamespace));
            
            #line default
            #line hidden
            this.Write(".SqlMaker.Interfaces;\r\n\r\nnamespace ");
            
            #line 10 "F:\Projects\Genie\Genie\Templates\SqlMaker\QueryMaker.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.baseNamespace));
            
            #line default
            #line hidden
            this.Write(".SqlMaker\r\n{\r\n    public class QueryMaker : ISqlMaker\r\n    {\r\n        private enu" +
                    "m ClauseType\r\n        {\r\n            ActionInsert,\r\n            ActionInsertValu" +
                    "es,\r\n            ActionUpdate,\r\n            ActionUpdateSet,\r\n            Action" +
                    "UpdateValues,\r\n            ActionUpdateWhere,\r\n            ActionSelect,\r\n      " +
                    "      ActionSelectWhereOnHaving,\r\n            ActionSelectJoin,\r\n            Act" +
                    "ionSelectOrder,\r\n            ActionSelectGroup,\r\n            ActionDelete,\r\n    " +
                    "        ActionDeleteWhere,\r\n            Table,\r\n            Column,\r\n           " +
                    " Parameter,\r\n        }\r\n\r\n        private const string Br = \"\\n\";\r\n        priva" +
                    "te const string BrIndent = \"\\n\\t\";\r\n        private const string BrIndentX2 = \"\\" +
                    "n\\t\\t\";\r\n\r\n        public static string DbScheme { get; set; }\r\n\r\n        privat" +
                    "e static List<Clause> _clauses;\r\n        private static List<Clause> Clauses\r\n  " +
                    "      {\r\n            get { return _clauses ?? (_clauses = new List<Clause>()); }" +
                    "\r\n        }\r\n\r\n        private class Clause\r\n        {\r\n            public stati" +
                    "c Clause New(ClauseType type, string sqlPart = null, string name = null, string " +
                    "aliace = null,\r\n                                        string condition = null," +
                    " string direction = null, string extra = null)\r\n            {\r\n                r" +
                    "eturn new Clause\r\n                {\r\n                    ClauseType = type,\r\n   " +
                    "                 SqlPart = sqlPart,\r\n                    Name = name,\r\n         " +
                    "           Aliace = aliace,\r\n                    Condition = condition,\r\n       " +
                    "             Direction = direction,\r\n                    Extra = extra\r\n        " +
                    "        };\r\n            }\r\n\r\n            public ClauseType ClauseType { get; pri" +
                    "vate set; }\r\n            public string SqlPart { get; private set; }\r\n          " +
                    "  public string Name { get; private set; }\r\n            public string Aliace { g" +
                    "et; private set; }\r\n            public string Condition { get; private set; }\r\n " +
                    "           public string Direction { get; private set; }\r\n            public str" +
                    "ing Extra { get; private set; }\r\n        }\r\n\r\n        private static ISqlMaker _" +
                    "sqlMaker;\r\n\r\n        public static ISqlMaker Current\r\n        {\r\n            get" +
                    " { return _sqlMaker ?? (_sqlMaker = new QueryMaker()); }\r\n        }\r\n        pub" +
                    "lic static ISqlFirst New(string dbScheme = null)\r\n        {\r\n            if (!st" +
                    "ring.IsNullOrEmpty(dbScheme))\r\n            {\r\n                DbScheme = dbSchem" +
                    "e;\r\n            }\r\n            Clauses.Clear();\r\n            _sqlMaker = new Que" +
                    "ryMaker();\r\n            return _sqlMaker;\r\n        }\r\n\r\n        #region Common M" +
                    "ethod\r\n        private static string FormatScheme(string globalScheme, string cu" +
                    "rrentScheme = null)\r\n        {\r\n            if (!string.IsNullOrEmpty(currentSch" +
                    "eme))\r\n            {\r\n                return string.Format(\"[{0}].\", currentSche" +
                    "me.Trim());\r\n            }\r\n            if (!string.IsNullOrEmpty(globalScheme))" +
                    "\r\n            {\r\n                return string.Format(\"[{0}].\", globalScheme.Tri" +
                    "m());\r\n            }\r\n            return string.Empty;\r\n        }\r\n        priva" +
                    "te static string FormatAliace(string aliace)\r\n        {\r\n            if (!string" +
                    ".IsNullOrEmpty(aliace))\r\n            {\r\n                return string.Format(\" A" +
                    "S {0}\", aliace.Trim());\r\n            }\r\n            return string.Empty;\r\n      " +
                    "  }\r\n        private static string FormatTableNameWithShema(string scheme, strin" +
                    "g tableName)\r\n        {\r\n            return string.Format(\"{0}[{1}]\", scheme, ta" +
                    "bleName.Trim());\r\n        }\r\n        private static string ResolveStringToRows(s" +
                    "tring extra, string indent)\r\n        {\r\n            var sb = new StringBuilder()" +
                    ";\r\n            var delimiters = new [] { \',\', \';\' };\r\n            var array = ex" +
                    "tra.Split(delimiters);\r\n            var firstParam = true;\r\n            foreach " +
                    "(var s in array)\r\n            {\r\n                if (firstParam)\r\n              " +
                    "  {\r\n                    sb.Append(indent + s.Trim());\r\n                    firs" +
                    "tParam = false;\r\n                }\r\n                else\r\n                {\r\n   " +
                    "                 sb.Append(indent + \", \" + s.Trim());\r\n                }\r\n      " +
                    "      }\r\n            return sb.ToString();\r\n        }\r\n        private static st" +
                    "ring FormatParameter(string paramName)\r\n        {\r\n            return paramName." +
                    "Contains(\"@\") ? paramName.Trim() : \"@\" + paramName.Trim();\r\n        }\r\n        #" +
                    "endregion\r\n\r\n        #region Resolve Sql Query\r\n        private static string Re" +
                    "solveInsert(IEnumerable<Clause> items, string dbScheme)\r\n        {\r\n            " +
                    "var list = items.ToList();\r\n            var sb = new StringBuilder();\r\n         " +
                    "   var sqlScheme = FormatScheme(dbScheme);\r\n            var isFirstCol = true;\r\n" +
                    "            var lastBkt = false;\r\n            var insertedParams = false;\r\n     " +
                    "       var colCount = list.Count(i => i.ClauseType == ClauseType.Column);\r\n     " +
                    "       var count = 0;\r\n            foreach (var clause in list)\r\n            {\r\n" +
                    "                switch (clause.ClauseType)\r\n                {\r\n                 " +
                    "   case ClauseType.ActionInsert:\r\n                        sb.Append(clause.SqlPa" +
                    "rt);\r\n                        sb.Append(\" \");\r\n                        sb.Append" +
                    "(FormatTableNameWithShema(sqlScheme, clause.Name));\r\n                        bre" +
                    "ak;\r\n                    case ClauseType.Column:\r\n                        count " +
                    "+= 1;\r\n                        if (isFirstCol)\r\n                        {\r\n     " +
                    "                       sb.Append(\" (\");\r\n                        }\r\n            " +
                    "            if (isFirstCol)\r\n                        {\r\n                        " +
                    "    sb.Append(BrIndentX2 + \"[\" + clause.Name + \"]\");\r\n                          " +
                    "  isFirstCol = false;\r\n                        }\r\n                        else\r\n" +
                    "                        {\r\n                            sb.Append(BrIndentX2 + \"," +
                    " [\" + clause.Name + \"]\");\r\n                        }\r\n                        if" +
                    " (count == colCount)\r\n                        {\r\n                            sb." +
                    "Append(BrIndent + \")\");\r\n                        }\r\n                        brea" +
                    "k;\r\n                    case ClauseType.ActionInsertValues:\r\n                   " +
                    "     lastBkt = true;\r\n                        sb.Append(BrIndent);\r\n            " +
                    "            sb.Append(clause.SqlPart);\r\n                        sb.Append(\" (\");" +
                    "\r\n                        if (!string.IsNullOrEmpty(clause.Extra))\r\n            " +
                    "            {\r\n                            insertedParams = true;\r\n             " +
                    "               sb.Append(ResolveStringToRows(clause.Extra, BrIndentX2));\r\n      " +
                    "                  }\r\n                        break;\r\n                    case Cl" +
                    "auseType.Parameter:\r\n                        var paramName = FormatParameter(cla" +
                    "use.Name);\r\n                        if (!insertedParams)\r\n                      " +
                    "  {\r\n                            insertedParams = true;\r\n                       " +
                    "     sb.Append(BrIndentX2 + paramName);\r\n                        }\r\n            " +
                    "            else\r\n                        {\r\n                            sb.Appe" +
                    "nd(BrIndentX2 + \", \" + paramName);\r\n                        }\r\n                 " +
                    "       break;\r\n                    default:\r\n                        throw new A" +
                    "rgumentOutOfRangeException(\"items\",\"Wrong clause type in Insert resolving method" +
                    "\");\r\n                }\r\n            }\r\n            if (lastBkt)\r\n            {\r\n" +
                    "                sb.Append(BrIndent + \");\");\r\n            }\r\n            return s" +
                    "b.ToString();\r\n        }\r\n\r\n        private static string ResolveUpdate(List<Cla" +
                    "use> list, string dbScheme)\r\n        {\r\n            var sb = new StringBuilder()" +
                    ";\r\n            var sqlScheme = FormatScheme(dbScheme);\r\n            var isSetPar" +
                    "am = false;\r\n            foreach (var clause in list)\r\n            {\r\n          " +
                    "      switch (clause.ClauseType)\r\n                {\r\n                    case Cl" +
                    "auseType.ActionUpdate:\r\n                        sb.Append(clause.SqlPart);\r\n    " +
                    "                    sb.Append(\" \");\r\n                        sb.Append(FormatTab" +
                    "leNameWithShema(sqlScheme, clause.Name));\r\n                        break;\r\n     " +
                    "               case ClauseType.ActionUpdateSet:\r\n                        sb.Appe" +
                    "nd(Br);\r\n                        sb.Append(clause.SqlPart);\r\n                   " +
                    "     if (!string.IsNullOrEmpty(clause.Extra))\r\n                        {\r\n      " +
                    "                      isSetParam = true;\r\n                            sb.Append(" +
                    "ResolveStringToRows(clause.Extra, BrIndent));\r\n                        }\r\n      " +
                    "                  break;\r\n                    case ClauseType.ActionUpdateValues" +
                    ":\r\n                        if (!isSetParam)\r\n                        {\r\n        " +
                    "                    isSetParam = true;\r\n                            sb.Append(Br" +
                    "Indent + clause.Name.Trim());\r\n                            sb.Append(\" = \");\r\n  " +
                    "                          sb.Append(FormatParameter(clause.Aliace));\r\n          " +
                    "              }\r\n                        else\r\n                        {\r\n      " +
                    "                      sb.Append(BrIndent + \", \" + clause.Name.Trim());\r\n        " +
                    "                    sb.Append(\" = \");\r\n                            sb.Append(For" +
                    "matParameter(clause.Aliace));\r\n                        }\r\n                      " +
                    "  break;\r\n                    case ClauseType.ActionUpdateWhere:\r\n              " +
                    "          sb.Append(clause.SqlPart);\r\n                        sb.Append(clause.C" +
                    "ondition.Trim());\r\n                        break;\r\n                    default:\r" +
                    "\n                        throw new ArgumentOutOfRangeException();\r\n             " +
                    "   }\r\n            }\r\n            sb.Append(\";\");\r\n            return sb.ToString" +
                    "();\r\n        }\r\n\r\n        private static string ResolveSelect(List<Clause> list," +
                    " string dbScheme)\r\n        {\r\n            var sb = new StringBuilder();\r\n       " +
                    "     bool isFirst = true;\r\n            foreach (var clause in list)\r\n           " +
                    " {\r\n                switch (clause.ClauseType)\r\n                {\r\n             " +
                    "       case ClauseType.ActionSelect:\r\n                        isFirst = true; //" +
                    " SELECT or UNION\r\n                        sb.Append(clause.SqlPart);\r\n          " +
                    "              if (!string.IsNullOrEmpty(clause.Extra))\r\n                        " +
                    "{\r\n                            isFirst = false;\r\n                            sb." +
                    "Append(ResolveStringToRows(clause.Extra, BrIndent));\r\n                        }\r" +
                    "\n                        break;\r\n                    case ClauseType.ActionSelec" +
                    "tWhereOnHaving:\r\n                        sb.Append(clause.SqlPart);\r\n           " +
                    "             sb.Append(clause.Condition.Trim());\r\n                        break;" +
                    "\r\n                    case ClauseType.ActionSelectJoin:\r\n                       " +
                    " var schemeJoin = FormatScheme(dbScheme, clause.Extra);\r\n                       " +
                    " var tabNameJoin = FormatTableNameWithShema(schemeJoin, clause.Name);\r\n         " +
                    "               var tabAliaceJoin = FormatAliace(clause.Aliace);\r\n               " +
                    "         sb.Append(clause.SqlPart);\r\n                        sb.Append(tabNameJo" +
                    "in + tabAliaceJoin);\r\n                        break;\r\n                    case C" +
                    "lauseType.ActionSelectOrder:\r\n                        sb.Append(clause.SqlPart);" +
                    "\r\n                        sb.Append(clause.Name.Trim());\r\n                      " +
                    "  sb.Append(\" \");\r\n                        sb.Append(clause.Direction);\r\n       " +
                    "                 break;\r\n                    case ClauseType.ActionSelectGroup:\r" +
                    "\n                        sb.Append(clause.SqlPart);\r\n                        sb." +
                    "Append(clause.Name.Trim());\r\n                        break;\r\n                   " +
                    " case ClauseType.Table:\r\n                        var scheme = FormatScheme(dbSch" +
                    "eme, clause.Extra);\r\n                        var tabName = FormatTableNameWithSh" +
                    "ema(scheme, clause.Name);\r\n                        var tabAliace = FormatAliace(" +
                    "clause.Aliace);\r\n                        if (isFirst)\r\n                        {" +
                    "\r\n                            isFirst = false;\r\n                            sb.A" +
                    "ppend(BrIndent + tabName + tabAliace);\r\n                        }\r\n             " +
                    "           else\r\n                        {\r\n                            sb.Appen" +
                    "d(BrIndent + \", \" + tabName + tabAliace);\r\n                        }\r\n          " +
                    "              break;\r\n                    case ClauseType.Column:\r\n             " +
                    "           var aliace = string.IsNullOrEmpty(clause.Aliace) ? string.Empty : \" A" +
                    "S \" + clause.Aliace.Trim();\r\n                        if (isFirst)\r\n             " +
                    "           {\r\n                            isFirst = false;\r\n                    " +
                    "        sb.Append(BrIndent + clause.Name.Trim() + aliace);\r\n                    " +
                    "    }\r\n                        else\r\n                        {\r\n                " +
                    "            sb.Append(BrIndent + \", \" + clause.Name.Trim() + aliace);\r\n         " +
                    "               }\r\n                        break;\r\n                    default:\r\n" +
                    "                        throw new ArgumentOutOfRangeException();\r\n              " +
                    "  }\r\n            }\r\n            sb.Append(\";\");\r\n            return sb.ToString(" +
                    ");\r\n        }\r\n\r\n        private static string ResolveDelete(List<Clause> list, " +
                    "string dbScheme)\r\n        {\r\n            var sb = new StringBuilder();\r\n        " +
                    "    var sqlScheme = FormatScheme(dbScheme);\r\n            foreach (var clause in " +
                    "list)\r\n            {\r\n                switch (clause.ClauseType)\r\n              " +
                    "  {\r\n                    case ClauseType.ActionDelete:\r\n                        " +
                    "sb.Append(clause.SqlPart);\r\n                        sb.Append(\" \");\r\n           " +
                    "             sb.Append(FormatTableNameWithShema(sqlScheme, clause.Name));\r\n     " +
                    "                   break;\r\n                    case ClauseType.ActionDeleteWhere" +
                    ":\r\n                        sb.Append(clause.SqlPart);\r\n                        s" +
                    "b.Append(clause.Condition.Trim());\r\n                        break;\r\n            " +
                    "        default:\r\n                        throw new ArgumentOutOfRangeException(" +
                    ");\r\n                }\r\n            }\r\n            sb.Append(\";\");\r\n            r" +
                    "eturn sb.ToString();\r\n        }\r\n        #endregion Resolve Sql Query\r\n\r\n       " +
                    " public virtual string RawSql()\r\n        {\r\n            string sqlResult;\r\n     " +
                    "       if (Clauses.Count == 0)\r\n            {\r\n                throw new Excepti" +
                    "on(\"Empty query\");\r\n            }\r\n            var first = Clauses.First();\r\n   " +
                    "         switch (first.ClauseType)\r\n            {\r\n                case ClauseTy" +
                    "pe.ActionInsert:\r\n                    sqlResult = ResolveInsert(Clauses, DbSchem" +
                    "e);\r\n                    break;\r\n                case ClauseType.ActionUpdate:\r\n" +
                    "                    sqlResult = ResolveUpdate(Clauses, DbScheme);\r\n             " +
                    "       break;\r\n                case ClauseType.ActionSelect:\r\n                  " +
                    "  sqlResult = ResolveSelect(Clauses, DbScheme);\r\n                    break;\r\n   " +
                    "             case ClauseType.ActionDelete:\r\n                    sqlResult = Reso" +
                    "lveDelete(Clauses, DbScheme);\r\n                    break;\r\n                defau" +
                    "lt:\r\n                    throw new Exception(\"Wrong start of query\");\r\n         " +
                    "   }\r\n            return sqlResult;\r\n        }\r\n\r\n        #region SELECT\r\n      " +
                    "  public virtual ISqlMakerSelect SELECT(string columns = null)\r\n        {\r\n     " +
                    "       Clauses.Add(Clause.New(ClauseType.ActionSelect, \"SELECT\", extra: columns)" +
                    ");\r\n            return this;\r\n        }\r\n\r\n        public virtual ISqlMakerSelec" +
                    "t SelectDistinct(string columns = null)\r\n        {\r\n            Clauses.Add(Clau" +
                    "se.New(ClauseType.ActionSelect, \"SELECT DISTINCT\", extra: columns));\r\n          " +
                    "  return this;\r\n        }\r\n\r\n        public virtual ISqlMakerSelect Union(bool i" +
                    "sAll = false)\r\n        {\r\n            var sqlPart = Br + \"UNION\" + (isAll ? \" AL" +
                    "L\" : string.Empty) + Br + \"SELECT\";\r\n            Clauses.Add(Clause.New(ClauseTy" +
                    "pe.ActionSelect, sqlPart));\r\n            return this;\r\n        }\r\n\r\n        publ" +
                    "ic virtual ISqlMakerSelect Col(string columnName, string columnAliace = null)\r\n " +
                    "       {\r\n            Clauses.Add(Clause.New(ClauseType.Column, name: columnName" +
                    ", aliace: columnAliace));\r\n            return this;\r\n        }\r\n\r\n        public" +
                    " virtual ISqlMakerSelect From(string tables = null)\r\n        {\r\n            Clau" +
                    "ses.Add(Clause.New(ClauseType.ActionSelect, Br + \"FROM\", extra: tables));\r\n     " +
                    "       return this;\r\n        }\r\n\r\n        public virtual ISqlMakerSelect Tab(str" +
                    "ing tableName, string tableAliace = null, string tableScheme = null)\r\n        {\r" +
                    "\n            Clauses.Add(Clause.New(ClauseType.Table, name: tableName, aliace: t" +
                    "ableAliace, extra: tableScheme));\r\n            return this;\r\n        }\r\n\r\n      " +
                    "  ISqlMakerSelect ISqlMakerSelect.Where(string whereConditions)\r\n        {\r\n    " +
                    "        Clauses.Add(Clause.New(ClauseType.ActionSelectWhereOnHaving, Br + \"WHERE" +
                    "\" + BrIndent, condition: whereConditions));\r\n            return this;\r\n        }" +
                    "\r\n\r\n        ISqlMakerSelect ISqlMakerSelect.WhereAnd(string whereConditions)\r\n  " +
                    "      {\r\n            Clauses.Add(Clause.New(ClauseType.ActionSelectWhereOnHaving" +
                    ", BrIndent + \"AND \", condition: whereConditions));\r\n            return this;\r\n  " +
                    "      }\r\n\r\n        ISqlMakerSelect ISqlMakerSelect.WhereOr(string whereCondition" +
                    "s)\r\n        {\r\n            Clauses.Add(Clause.New(ClauseType.ActionSelectWhereOn" +
                    "Having, BrIndent + \"OR \", condition: whereConditions));\r\n            return this" +
                    ";\r\n        }\r\n\r\n        public virtual ISqlMakerSelect Join(string tableName, st" +
                    "ring tableAliace = null)\r\n        {\r\n            Clauses.Add(Clause.New(ClauseTy" +
                    "pe.ActionSelectJoin, Br + \"INNER JOIN \", name: tableName, aliace: tableAliace));" +
                    "\r\n            return this;\r\n        }\r\n\r\n        public virtual ISqlMakerSelect " +
                    "LeftJoin(string tableName, string tableAliace = null)\r\n        {\r\n            Cl" +
                    "auses.Add(Clause.New(ClauseType.ActionSelectJoin, Br + \"LEFT JOIN \", name: table" +
                    "Name, aliace: tableAliace));\r\n            return this;\r\n        }\r\n\r\n        pub" +
                    "lic virtual ISqlMakerSelect RightJoin(string tableName, string tableAliace = nul" +
                    "l)\r\n        {\r\n            Clauses.Add(Clause.New(ClauseType.ActionSelectJoin, B" +
                    "r + \"RIGHT JOIN \", name: tableName, aliace: tableAliace));\r\n            return t" +
                    "his;\r\n        }\r\n\r\n        public virtual ISqlMakerSelect FullJoin(string tableN" +
                    "ame, string tableAliace = null)\r\n        {\r\n            Clauses.Add(Clause.New(C" +
                    "lauseType.ActionSelectJoin, Br + \"FULL JOIN \", name: tableName, aliace: tableAli" +
                    "ace));\r\n            return this;\r\n        }\r\n\r\n        public virtual ISqlMakerS" +
                    "elect On(string condition)\r\n        {\r\n            Clauses.Add(Clause.New(Clause" +
                    "Type.ActionSelectWhereOnHaving, BrIndent + \"ON \", condition: condition));\r\n     " +
                    "       return this;\r\n        }\r\n\r\n        public virtual ISqlMakerSelect OnAnd(s" +
                    "tring condition)\r\n        {\r\n            Clauses.Add(Clause.New(ClauseType.Actio" +
                    "nSelectWhereOnHaving, BrIndent + \"AND \", condition: condition));\r\n            re" +
                    "turn this;\r\n        }\r\n\r\n        public virtual ISqlMakerSelect OnOr(string cond" +
                    "ition)\r\n        {\r\n            Clauses.Add(Clause.New(ClauseType.ActionSelectWhe" +
                    "reOnHaving, BrIndent + \"OR \", condition: condition));\r\n            return this;\r" +
                    "\n        }\r\n\r\n        public virtual ISqlMakerSelect OrderBy(string columnName, " +
                    "SortAs direction)\r\n        {\r\n            Clauses.Add(Clause.New(ClauseType.Acti" +
                    "onSelectOrder, Br + \"ORDER BY \", name: columnName, direction: direction.ToString" +
                    "().ToUpperInvariant()));\r\n            return this;\r\n        }\r\n\r\n        public " +
                    "virtual ISqlMakerSelect OrderThen(string columnName, SortAs direction)\r\n        " +
                    "{\r\n            Clauses.Add(Clause.New(ClauseType.ActionSelectOrder, \", \", name: " +
                    "columnName, direction: direction.ToString().ToUpperInvariant()));\r\n            r" +
                    "eturn this;\r\n        }\r\n\r\n        public virtual ISqlMakerSelect GroupBy(string " +
                    "columnName)\r\n        {\r\n            Clauses.Add(Clause.New(ClauseType.ActionSele" +
                    "ctGroup, Br + \"GROUP BY \", name: columnName));\r\n            return this;\r\n      " +
                    "  }\r\n\r\n        public virtual ISqlMakerSelect GroupThen(string columnName)\r\n    " +
                    "    {\r\n            Clauses.Add(Clause.New(ClauseType.ActionSelectGroup, \", \", na" +
                    "me: columnName));\r\n            return this;\r\n        }\r\n\r\n        public virtual" +
                    " ISqlMakerSelect Having(string havingConditions)\r\n        {\r\n            Clauses" +
                    ".Add(Clause.New(ClauseType.ActionSelectWhereOnHaving, Br + \"HAVING \", condition:" +
                    " havingConditions));\r\n            return this;\r\n        }\r\n\r\n        public virt" +
                    "ual ISqlMakerSelect HavingAnd(string havingConditions)\r\n        {\r\n            C" +
                    "lauses.Add(Clause.New(ClauseType.ActionSelectWhereOnHaving, BrIndent + \"AND \", c" +
                    "ondition: havingConditions));\r\n            return this;\r\n        }\r\n\r\n        pu" +
                    "blic virtual ISqlMakerSelect HavingOr(string havingConditions)\r\n        {\r\n     " +
                    "       Clauses.Add(Clause.New(ClauseType.ActionSelectWhereOnHaving, BrIndent + \"" +
                    "OR \", condition: havingConditions));\r\n            return this;\r\n        }\r\n     " +
                    "   #endregion SELECT\r\n\r\n        #region INSERT\r\n        public virtual ISqlMaker" +
                    "Insert INSERT(string tableName)\r\n        {\r\n            Clauses.Add(Clause.New(C" +
                    "lauseType.ActionInsert, \"INSERT INTO\", name: tableName));\r\n            return th" +
                    "is;\r\n        }\r\n        public virtual ISqlMakerInsert Col(string columnName)\r\n " +
                    "       {\r\n            Clauses.Add(Clause.New(ClauseType.Column, name: columnName" +
                    "));\r\n            return this;\r\n        }\r\n\r\n        public virtual ISqlMakerInse" +
                    "rt VALUES(string parameters = null)\r\n        {\r\n            Clauses.Add(Clause.N" +
                    "ew(ClauseType.ActionInsertValues, \"VALUES\", extra: parameters));\r\n            re" +
                    "turn this;\r\n        }\r\n\r\n        public virtual ISqlMakerInsert Param(string par" +
                    "amName)\r\n        {\r\n            Clauses.Add(Clause.New(ClauseType.Parameter, nam" +
                    "e: paramName));\r\n            return this;\r\n        }\r\n        #endregion INSERT\r" +
                    "\n\r\n        #region UPDATE\r\n        public virtual ISqlMakerUpdate UPDATE(string " +
                    "tableName)\r\n        {\r\n            Clauses.Add(Clause.New(ClauseType.ActionUpdat" +
                    "e, \"UPDATE\", name: tableName));\r\n            return this;\r\n        }\r\n\r\n        " +
                    "public virtual ISqlMakerUpdate SET(string columnsValues = null)\r\n        {\r\n    " +
                    "        Clauses.Add(Clause.New(ClauseType.ActionUpdateSet, \"SET\", extra: columns" +
                    "Values));\r\n            return this;\r\n        }\r\n\r\n        public virtual ISqlMak" +
                    "erUpdate Val(string columnName, string parameterAliace)\r\n        {\r\n            " +
                    "Clauses.Add(Clause.New(ClauseType.ActionUpdateValues, name: columnName, aliace: " +
                    "parameterAliace));\r\n            return this;\r\n        }\r\n\r\n        ISqlMakerUpda" +
                    "te ISqlMakerUpdate.WHERE(string whereConditions)\r\n        {\r\n            Clauses" +
                    ".Add(Clause.New(ClauseType.ActionUpdateWhere, Br + \"WHERE \", condition: whereCon" +
                    "ditions));\r\n            return this;\r\n        }\r\n\r\n        ISqlMakerUpdate ISqlM" +
                    "akerUpdate.WhereAnd(string whereConditions)\r\n        {\r\n            Clauses.Add(" +
                    "Clause.New(ClauseType.ActionUpdateWhere, BrIndent + \"AND \", condition: whereCond" +
                    "itions));\r\n            return this;\r\n        }\r\n\r\n        ISqlMakerUpdate ISqlMa" +
                    "kerUpdate.WhereOr(string whereConditions)\r\n        {\r\n            Clauses.Add(Cl" +
                    "ause.New(ClauseType.ActionUpdateWhere, BrIndent + \"OR \", condition: whereConditi" +
                    "ons));\r\n            return this;\r\n        }\r\n        #endregion UPDATE\r\n\r\n      " +
                    "  #region DELETE\r\n        public virtual ISqlMakerDelete DELETE(string tableName" +
                    ")\r\n        {\r\n            Clauses.Add(Clause.New(ClauseType.ActionDelete, \"DELET" +
                    "E FROM\", name: tableName));\r\n            return this;\r\n        }\r\n\r\n        publ" +
                    "ic virtual ISqlMakerDelete WHERE(string whereConditions)\r\n        {\r\n           " +
                    " Clauses.Add(Clause.New(ClauseType.ActionDeleteWhere, Br + \"WHERE \", condition: " +
                    "whereConditions));\r\n            return this;\r\n        }\r\n\r\n        public virtua" +
                    "l ISqlMakerDelete WhereAnd(string whereConditions)\r\n        {\r\n            Claus" +
                    "es.Add(Clause.New(ClauseType.ActionDeleteWhere, BrIndent + \"AND \", condition: wh" +
                    "ereConditions));\r\n            return this;\r\n        }\r\n\r\n        public virtual " +
                    "ISqlMakerDelete WhereOr(string whereConditions)\r\n        {\r\n            Clauses." +
                    "Add(Clause.New(ClauseType.ActionDeleteWhere, BrIndent + \"OR \", condition: whereC" +
                    "onditions));\r\n            return this;\r\n        }\r\n        #endregion DELETE\r\n  " +
                    "  }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class QueryMakerBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
