// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Genie.Templates.Complex
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class Infrastructure : InfrastructureBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n    namespace Infrastructure\r\n    {\r\n        namespace Enum\r\n        {\r\n       " +
                    "     public enum Condition\r\n            {\r\n                IsNull,\r\n            " +
                    "    IsNotNull,\r\n                Equal,\r\n                NotEqual,\r\n             " +
                    "   Less,\r\n                Greater,\r\n                LessEqual,\r\n                " +
                    "GreaterEqual,\r\n                Between,\r\n                Like,\r\n                " +
                    "In\r\n            }\r\n\r\n            public static class ConditionExtension\r\n       " +
                    "     {\r\n                public static string GetString(this Condition e)\r\n      " +
                    "          {\r\n                    var result = string.Empty;\r\n                   " +
                    " switch (e)\r\n                    {\r\n                        case Condition.IsNul" +
                    "l:\r\n                            return \"IS NULL\";\r\n                        case " +
                    "Condition.IsNotNull:\r\n                            return \"IS NOT NULL\";\r\n       " +
                    "                 case Condition.Equal:\r\n                            return \"=\";\r" +
                    "\n                        case Condition.NotEqual:\r\n                            r" +
                    "eturn \"<>\";\r\n                        case Condition.Less:\r\n                     " +
                    "       return \"<\";\r\n                        case Condition.Greater:\r\n           " +
                    "                 return \">\";\r\n                        case Condition.LessEqual:\r" +
                    "\n                            return \"<=\";\r\n                        case Conditio" +
                    "n.GreaterEqual:\r\n                            return \">=\";\r\n                     " +
                    "   case Condition.Between:\r\n                            return \"BETWEEN\";\r\n     " +
                    "                   case Condition.Like:\r\n                            return \"LIK" +
                    "E\";\r\n                        case Condition.In:\r\n                            ret" +
                    "urn \"IN\";\r\n                        default:\r\n                            throw n" +
                    "ew ArgumentOutOfRangeException(\"e\");\r\n                    }\r\n                }\r\n" +
                    "            }\r\n\r\n            public enum SortAs\r\n            {\r\n                " +
                    "Asc,\r\n                Desc\r\n            }\r\n        }\r\n\r\n        namespace EnumQu" +
                    "eriesStoredProcedures\r\n        {\r\n\r\n          ");
            
            #line 71 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var relation in Model.Relations){
          
            
            #line default
            #line hidden
            this.Write("public class ");
            
            #line 72 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Enum : EnumBase<");
            
            #line 72 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Enum, string>\r\n            {\r\n                public ");
            
            #line 74 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Enum(string name, string enumValue, CommandType? cmdType)\r\n                : base" +
                    "(name, enumValue, cmdType)\r\n                    {\r\n                    }\r\n      " +
                    "      }\r\n          ");
            
            #line 79 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n          ");
            
            #line 81 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var view in Model.Views){
          
            
            #line default
            #line hidden
            this.Write("public class ");
            
            #line 82 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write("Enum : EnumBase<");
            
            #line 82 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write("Enum, string>\r\n            {\r\n                public ");
            
            #line 84 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write("Enum(string name, string enumValue, CommandType? cmdType)\r\n                : base" +
                    "(name, enumValue, cmdType)\r\n                    {\r\n                    }\r\n      " +
                    "      }\r\n          ");
            
            #line 89 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("            //public class BankEnum : EnumBase<BankEnum, string>\r\n            //{" +
                    "\r\n                //public static readonly BankEnum GetCustomerByPage = new Bank" +
                    "Enum(\"GetCustomerByPage\", \"[dbo].[spCustomerListByPageGet]\", CommandType.StoredP" +
                    "rocedure);\r\n//\r\n                //public BankEnum(string Name, string EnumValue," +
                    " CommandType? cmdType)\r\n                    //: base(Name, EnumValue, cmdType)\r\n" +
                    "                //{\r\n                //}\r\n            //}\r\n\r\n\r\n\r\n            pub" +
                    "lic sealed class EmptyEnum : EnumBase<EmptyEnum, string>\r\n            {\r\n       " +
                    "         public EmptyEnum(string Name, string EnumValue, CommandType? cmdType)\r\n" +
                    "                    : base(Name, EnumValue, cmdType)\r\n                {\r\n       " +
                    "         }\r\n            }\r\n        }\r\n\r\n        namespace Interfaces\r\n        {\r" +
                    "\n            public interface IDapperContext : IDisposable\r\n            {\r\n     " +
                    "           IDbConnection Connection { get; }\r\n            }\r\n\r\n            publi" +
                    "c interface IFactoryRepository\r\n            {\r\n                IRepository<T, TR" +
                    "epoSp> CreateRepository<T, TRepoSp>(IDapperContext context, UnitOfWork unit)\r\n  " +
                    "                  where T : BaseModel\r\n                    where TRepoSp : EnumB" +
                    "ase<TRepoSp, string>;\r\n\r\n                IViewRepository<T, TRepoSp> CreateViewR" +
                    "epository<T, TRepoSp>(IDapperContext context)\r\n                    where T : cla" +
                    "ss\r\n                    where TRepoSp : EnumBase<TRepoSp, string>;\r\n            " +
                    "}\r\n\r\n            public interface IRepository<T, in TRepoQuery>\r\n              w" +
                    "here T : BaseModel\r\n              where TRepoQuery : EnumBase<TRepoQuery, string" +
                    ">\r\n            {\r\n                IDbConnection Conn { get; }\r\n                I" +
                    "DapperContext Context { get; }\r\n\r\n\r\n                void Add(T entity, IDbTransa" +
                    "ction transaction = null, int? commandTimeout = null);\r\n                void Upd" +
                    "ate(T entity, IDbTransaction transaction = null, int? commandTimeout = null);\r\n " +
                    "               void Remove(T entity, IDbTransaction transaction = null, int? com" +
                    "mandTimeout = null);\r\n\r\n                T GetByKey(object key, IDbTransaction tr" +
                    "ansaction = null, int? commandTimeout = null);\r\n\r\n                IEnumerable<T>" +
                    " GetAll(IDbTransaction transaction = null, int? commandTimeout = null);\r\n       " +
                    "         IEnumerable<T> GetBy(object where = null, object order = null, IDbTrans" +
                    "action transaction = null, int? commandTimeout = null);\r\n\r\n                IEnum" +
                    "erable<TSp> Exec<TSp>(TRepoQuery repoQuery, DynamicParameters param = null, IDbT" +
                    "ransaction transaction = null, int? commandTimeout = null);\r\n                voi" +
                    "d Exec(TRepoQuery repoQuery, DynamicParameters param = null, IDbTransaction tran" +
                    "saction = null, int? commandTimeout = null);\r\n            }\r\n\r\n            publi" +
                    "c interface IUnitOfWork\r\n            {\r\n                IDapperContext Context {" +
                    " get; }\r\n                IDbTransaction Transaction { get; }\r\n                IR" +
                    "epository<TSet, TEnumSp> GetRepository<TSet, TEnumSp>() where TSet : BaseModel w" +
                    "here TEnumSp : EnumBase<TEnumSp, string>;\r\n                IDbTransaction BeginT" +
                    "ransaction();\r\n                void Commit();\r\n            }\r\n        }\r\n\r\n     " +
                    "   public interface IViewRepository<out T, in TRepoQuery>\r\n            where T :" +
                    " class\r\n            where TRepoQuery : EnumBase<TRepoQuery, string>\r\n        {\r\n" +
                    "            IDbConnection Conn { get; }\r\n            IDapperContext Context { ge" +
                    "t; }\r\n\r\n            IEnumerable<T> GetAll(IDbTransaction transaction = null, int" +
                    "? commandTimeout = null);\r\n            IEnumerable<T> GetBy(object where = null," +
                    " object order = null, IDbTransaction transaction = null, int? commandTimeout = n" +
                    "ull);\r\n\r\n            IEnumerable<TSp> Exec<TSp>(TRepoQuery repoQuery, DynamicPar" +
                    "ameters param = null, IDbTransaction transaction = null, int? commandTimeout = n" +
                    "ull);\r\n            void Exec(TRepoQuery repoQuery, DynamicParameters param = nul" +
                    "l, IDbTransaction transaction = null, int? commandTimeout = null);\r\n        }\r\n\r" +
                    "\n        namespace Repos\r\n        {\r\n        ");
            
            #line 176 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
if(1==0){
            
            #line default
            #line hidden
            this.Write("          ");
            
            #line 177 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var relation in Model.Relations){
          
            
            #line default
            #line hidden
            this.Write("public class ");
            
            #line 178 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Repository : Repository<");
            
            #line 178 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 178 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Enum>\r\n            {\r\n                public ");
            
            #line 180 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Repository(IDapperContext context) : base(context)\r\n                {\r\n          " +
                    "      }\r\n            }\r\n            ");
            
            #line 184 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 186 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var view in Model.Views){
          
            
            #line default
            #line hidden
            this.Write("public class ");
            
            #line 187 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write("Repository : ViewRepository<");
            
            #line 187 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 187 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write("Enum>\r\n            {\r\n                public ");
            
            #line 189 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write("Repository(IDapperContext context) : base(context)\r\n                {\r\n          " +
                    "      }\r\n            }\r\n            ");
            
            #line 193 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 194 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write(@"         
        }

        namespace Models
        {
            internal enum ModelStatus 
            {
                JustInMemory = 1,
                Retrieved = 2,
                Deleted = 3
            }

            public abstract class BaseModel 
            {
                protected BaseModel() { UpdatedProperties = new HashSet<string>(); DatabaseModelStatus = ModelStatus.JustInMemory; }
                internal HashSet<string> UpdatedProperties { get; set; }
                internal ModelStatus DatabaseModelStatus { get; set; }
                internal UnitOfWork DatabaseUnitOfWork { get; set; }
            }

            ");
            
            #line 215 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var relation in Model.Relations){
          
            
            #line default
            #line hidden
            this.Write("[Table(\"[dbo].[");
            
            #line 216 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.RelationName));
            
            #line default
            #line hidden
            this.Write("]\")]\r\n            public class ");
            
            #line 217 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write(" : BaseModel\r\n            {\r\n                \r\n                ");
            
            #line 220 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var atd in relation.Attributes){
              
            
            #line default
            #line hidden
            this.Write("private ");
            
            #line 221 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.DataType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 221 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.FieldName));
            
            #line default
            #line hidden
            this.Write(";\r\n                ");
            
            #line 222 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 224 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var atd in relation.ForeignKeyAttributes){
              
            
            #line default
            #line hidden
            this.Write("private ");
            
            #line 225 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.DataType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 225 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.FieldName));
            
            #line default
            #line hidden
            this.Write(";\r\n                ");
            
            #line 226 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 228 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var atd in relation.Attributes){
            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 229 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
if(atd.IsKey) {
              
            
            #line default
            #line hidden
            this.Write("[Key]\r\n                ");
            
            #line 231 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
              
            
            #line default
            #line hidden
            this.Write("public ");
            
            #line 232 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.DataType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 232 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.Name));
            
            #line default
            #line hidden
            this.Write(" { get { return ");
            
            #line 232 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.FieldName));
            
            #line default
            #line hidden
            this.Write("; } set { ");
            
            #line 232 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.FieldName));
            
            #line default
            #line hidden
            this.Write(" = value; if(DatabaseModelStatus == ModelStatus.Retrieved) { UpdatedProperties.Ad" +
                    "d(\"");
            
            #line 232 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.Name));
            
            #line default
            #line hidden
            this.Write("\"); } } }\r\n                ");
            
            #line 233 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 235 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var atd in relation.ForeignKeyAttributes){
              
            
            #line default
            #line hidden
            this.Write("public ");
            
            #line 236 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.DataType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 236 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.Name));
            
            #line default
            #line hidden
            this.Write("(IDbTransaction transaction =null)\r\n                {\r\n                    return" +
                    " DatabaseUnitOfWork != null ? ");
            
            #line 238 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.FieldName));
            
            #line default
            #line hidden
            this.Write(" ?? (");
            
            #line 238 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.FieldName));
            
            #line default
            #line hidden
            this.Write(" = DatabaseUnitOfWork.");
            
            #line 238 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.DataType));
            
            #line default
            #line hidden
            this.Write("Repository.GetByKey(");
            
            #line 238 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.ReferencingAttribute.FieldName));
            
            #line default
            #line hidden
            this.Write(", transaction)) : null;\r\n                }\r\n              ");
            
            #line 240 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("            }\r\n");
            
            #line 242 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 244 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var view in Model.Views){
          
            
            #line default
            #line hidden
            this.Write("[Table(\"[dbo].[");
            
            #line 245 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.RelationName));
            
            #line default
            #line hidden
            this.Write("]\")]\r\n            public class ");
            
            #line 246 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write(" \r\n            {\r\n                ");
            
            #line 248 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var atd in view.Attributes){
              
            
            #line default
            #line hidden
            this.Write("public ");
            
            #line 249 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.DataType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 249 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.Name));
            
            #line default
            #line hidden
            this.Write(" { get; set; } \r\n                ");
            
            #line 250 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("            }\r\n");
            
            #line 252 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        public class DapperContext : IDapperContext\r\n        {\r\n    " +
                    "        private readonly string _connectionStringName;\r\n            private read" +
                    "only string _connectionString;\r\n            private IDbConnection _connection;\r\n" +
                    "\r\n            public DapperContext()\r\n            {\r\n                _connection" +
                    "StringName = ConfigurationManager.AppSettings[\"UsedConnectionString\"];\r\n        " +
                    "        _connectionString = ConfigurationManager.ConnectionStrings[_connectionSt" +
                    "ringName].ConnectionString; ;\r\n            }\r\n\r\n            public IDbConnection" +
                    " Connection\r\n            {\r\n                get\r\n                {\r\n            " +
                    "        if (_connection == null)\r\n                    {\r\n                       " +
                    " _connection = new SqlConnection(_connectionString);\r\n                    }\r\n   " +
                    "                 if (_connection.State != ConnectionState.Open)\r\n               " +
                    "     {\r\n                        _connection.Open();\r\n                    }\r\n    " +
                    "                return _connection;\r\n                }\r\n            }\r\n         " +
                    "   public void Dispose()\r\n            {\r\n                if (_connection != null" +
                    " && _connection.State == ConnectionState.Open)\r\n                    _connection." +
                    "Close();\r\n            }\r\n        }\r\n\r\n        public class FactoryRepository : I" +
                    "FactoryRepository\r\n        {\r\n            public IRepository<T, TEnumSp> CreateR" +
                    "epository<T, TEnumSp>(IDapperContext context, UnitOfWork unit) where T : BaseMod" +
                    "el where TEnumSp : EnumBase<TEnumSp, string>\r\n            {\r\n                ret" +
                    "urn  new Repository<T, TEnumSp>(context, unit);\r\n            \r\n            }\r\n\r\n" +
                    "            public IViewRepository<T, TEnumSp> CreateViewRepository<T, TEnumSp>(" +
                    "IDapperContext context) where T : class where TEnumSp : EnumBase<TEnumSp, string" +
                    ">\r\n            {\r\n                return  new ViewRepository<T, TEnumSp>(context" +
                    ");\r\n            }\r\n        }\r\n\r\n        public class Repository<T, TRepoQuery> :" +
                    " IRepository<T, TRepoQuery>\r\n               where T : BaseModel\r\n               " +
                    "where TRepoQuery : EnumBase<TRepoQuery, string>\r\n        {\r\n            public I" +
                    "DbConnection Conn { get; }\r\n            public IDapperContext Context { get;}\r\n " +
                    "           public UnitOfWork UnitOfWork { get;}\r\n\r\n            public Repository" +
                    "(IDapperContext context, UnitOfWork unitOfWork)\r\n            {\r\n                " +
                    "Context = context;\r\n                Conn = Context.Connection;\r\n                " +
                    "UnitOfWork = unitOfWork;\r\n            }\r\n\r\n            public virtual void Add(T" +
                    " entity, IDbTransaction transaction = null, int? commandTimeout = null)\r\n       " +
                    "     {\r\n                if (entity == null)\r\n                {\r\n                " +
                    "    throw new ArgumentNullException(\"entity\", \"Add to DB null entity\");\r\n       " +
                    "         }\r\n                var insertedId = Conn.Insert(entity, transaction: tr" +
                    "ansaction, commandTimeout: commandTimeout);\r\n                entity.DatabaseMode" +
                    "lStatus = ModelStatus.Retrieved;\r\n                entity.DatabaseUnitOfWork = Un" +
                    "itOfWork;\r\n            }\r\n\r\n            public virtual void Update(T entity, IDb" +
                    "Transaction transaction = null, int? commandTimeout = null)\r\n            {\r\n    " +
                    "            if (entity == null)\r\n                {\r\n                    throw ne" +
                    "w ArgumentNullException(\"entity\", \"Update in DB null entity\");\r\n                " +
                    "}\r\n                Conn.Update(entity, transaction: transaction, commandTimeout:" +
                    " commandTimeout);\r\n            }\r\n\r\n            public virtual void Remove(T ent" +
                    "ity, IDbTransaction transaction = null, int? commandTimeout = null)\r\n           " +
                    " {\r\n                if (entity == null)\r\n                {\r\n                    " +
                    "throw new ArgumentNullException(\"entity\", \"Remove in DB null entity\");\r\n        " +
                    "        }\r\n                var deleted = Conn.Delete(entity, transaction: transa" +
                    "ction, commandTimeout: commandTimeout);\r\n                if(deleted) { entity.Da" +
                    "tabaseModelStatus = ModelStatus.Deleted; }\r\n            }\r\n\r\n            public " +
                    "virtual T GetByKey(object id, IDbTransaction transaction = null, int? commandTim" +
                    "eout = null)\r\n            {\r\n                if (id == null)\r\n                {\r" +
                    "\n                    throw new ArgumentNullException(\"id\");\r\n                }\r\n" +
                    "                var item = Conn.Get<T>(id, transaction: transaction, commandTime" +
                    "out: commandTimeout);\r\n                item.DatabaseModelStatus = ModelStatus.Re" +
                    "trieved;\r\n                item.DatabaseUnitOfWork = UnitOfWork;\r\n               " +
                    " return item;\r\n            }\r\n\r\n            public virtual IEnumerable<T> GetAll" +
                    "(IDbTransaction transaction = null, int? commandTimeout = null)\r\n            {\r\n" +
                    "                var items = Conn.GetAll<T>(transaction: transaction, commandTime" +
                    "out: commandTimeout).ToList();\r\n\r\n                foreach (var item in items) \r\n" +
                    "                {\r\n                    item.DatabaseUnitOfWork = UnitOfWork;\r\n  " +
                    "                  item.DatabaseModelStatus = ModelStatus.Retrieved;\r\n           " +
                    "     }\r\n                return items;\r\n            }\r\n\r\n            public virtu" +
                    "al IEnumerable<T> GetBy(object where = null, object order = null, IDbTransaction" +
                    " transaction = null, int? commandTimeout = null)\r\n            {\r\n               " +
                    " var items = Conn.GetBy<T>(where: where, order: order, transaction: transaction," +
                    " commandTimeout: commandTimeout).ToList();\r\n\r\n                foreach (var item " +
                    "in items)\r\n                {\r\n                    item.DatabaseUnitOfWork = Unit" +
                    "OfWork;\r\n                    item.DatabaseModelStatus = ModelStatus.Retrieved;\r\n" +
                    "                }\r\n                return items;\r\n            }\r\n\r\n            p" +
                    "ublic IEnumerable<TSp> Exec<TSp>(TRepoQuery repoQuery, DynamicParameters param =" +
                    " null, IDbTransaction transaction = null,\r\n                                     " +
                    "             int? commandTimeout = null)\r\n            {\r\n                return " +
                    "Conn.Query<TSp>(repoQuery.Value, param, commandType: repoQuery.CmdType, transact" +
                    "ion: transaction, commandTimeout: commandTimeout);\r\n            }\r\n\r\n           " +
                    " public void Exec(TRepoQuery repoQuery, DynamicParameters param = null, IDbTrans" +
                    "action transaction = null,\r\n                                      int? commandTi" +
                    "meout = null)\r\n            {\r\n                Conn.Execute(repoQuery.Value, para" +
                    "m, commandType: repoQuery.CmdType, transaction: transaction, commandTimeout: com" +
                    "mandTimeout);\r\n            }\r\n        }\r\n\r\n        public class ViewRepository<T" +
                    ", TRepoQuery> : IViewRepository<T, TRepoQuery>\r\n            where T : class\r\n   " +
                    "         where TRepoQuery : EnumBase<TRepoQuery, string>\r\n        {\r\n           " +
                    " public IDbConnection Conn { get; }\r\n            public IDapperContext Context {" +
                    " get;}\r\n\r\n            public ViewRepository(IDapperContext context)\r\n           " +
                    " {\r\n                Context = context;\r\n                Conn = Context.Connectio" +
                    "n;\r\n            }\r\n\r\n            public virtual IEnumerable<T> GetAll(IDbTransac" +
                    "tion transaction = null, int? commandTimeout = null)\r\n            {\r\n           " +
                    "     return Conn.GetAll<T>(transaction: transaction, commandTimeout: commandTime" +
                    "out).ToList();\r\n            }\r\n\r\n            public virtual IEnumerable<T> GetBy" +
                    "(object where = null, object order = null, IDbTransaction transaction = null, in" +
                    "t? commandTimeout = null)\r\n            {\r\n                return Conn.GetBy<T>(w" +
                    "here: where, order: order, transaction: transaction, commandTimeout: commandTime" +
                    "out).ToList();\r\n            }\r\n\r\n            public IEnumerable<TSp> Exec<TSp>(T" +
                    "RepoQuery repoQuery, DynamicParameters param = null, IDbTransaction transaction " +
                    "= null,\r\n                                                  int? commandTimeout =" +
                    " null)\r\n            {\r\n                return Conn.Query<TSp>(repoQuery.Value, p" +
                    "aram, commandType: repoQuery.CmdType, transaction: transaction, commandTimeout: " +
                    "commandTimeout);\r\n            }\r\n\r\n            public void Exec(TRepoQuery repoQ" +
                    "uery, DynamicParameters param = null, IDbTransaction transaction = null,\r\n      " +
                    "                                int? commandTimeout = null)\r\n            {\r\n    " +
                    "            Conn.Execute(repoQuery.Value, param, commandType: repoQuery.CmdType," +
                    " transaction: transaction, commandTimeout: commandTimeout);\r\n            }\r\n    " +
                    "    }\r\n\r\n        public class UnitOfWork : IUnitOfWork, IDisposable\r\n        {\r\n" +
                    "            private readonly Dictionary<Type, object> _repositories;\r\n          " +
                    "  private readonly IFactoryRepository _factory;\r\n\r\n            public IDapperCon" +
                    "text Context { get;}\r\n            public IDbTransaction Transaction { get; priva" +
                    "te set; }\r\n\r\n            public UnitOfWork(IDapperContext context, IFactoryRepos" +
                    "itory factory)\r\n            {\r\n                Context = context;\r\n             " +
                    "   _factory = factory;\r\n                _repositories = new Dictionary<Type, obj" +
                    "ect>();\r\n            }\r\n            \r\n            ");
            
            #line 448 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var relation in Model.Relations){
          
            
            #line default
            #line hidden
            this.Write("public IRepository<");
            
            #line 449 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 449 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Enum> ");
            
            #line 449 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Repository { get { return GetRepository<");
            
            #line 449 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 449 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Enum>(); } }\r\n            ");
            
            #line 450 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 452 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var view in Model.Views){
          
            
            #line default
            #line hidden
            this.Write("public IViewRepository<");
            
            #line 453 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 453 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write("Enum> ");
            
            #line 453 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write("Repository { get { return GetViewRepository<");
            
            #line 453 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 453 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(view.Name));
            
            #line default
            #line hidden
            this.Write("Enum>(); } }\r\n            ");
            
            #line 454 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 456 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var sp in Model.Procedures){
          
            
            #line default
            #line hidden
            this.Write("public List<T> ");
            
            #line 457 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sp.Name));
            
            #line default
            #line hidden
            this.Write("<T>(");
            
            #line 457 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sp.ParamString));
            
            #line default
            #line hidden
            this.Write(") { return Context.Connection.Query<T>(\"EXEC ");
            
            #line 457 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sp.FullName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 457 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sp.PassString));
            
            #line default
            #line hidden
            this.Write("\").ToList(); }\r\n            ");
            
            #line 458 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            public IRepository<TSet, TEnumSp> GetRepository<TSet, TEnumSp>() wh" +
                    "ere TSet : BaseModel where TEnumSp : EnumBase<TEnumSp, string>\r\n            {\r\n " +
                    "               if (_repositories.Keys.Contains(typeof(TSet)))\r\n                 " +
                    "   return _repositories[typeof(TSet)] as IRepository<TSet, TEnumSp>;\r\n\r\n        " +
                    "        var repository = _factory.CreateRepository<TSet, TEnumSp>(Context, this)" +
                    ";\r\n                _repositories.Add(typeof(TSet), repository);\r\n\r\n             " +
                    "   return repository;\r\n            }\r\n\r\n            public IViewRepository<TSet," +
                    " TEnumSp> GetViewRepository<TSet, TEnumSp>() where TSet : class where TEnumSp : " +
                    "EnumBase<TEnumSp, string>\r\n            {\r\n                if (_repositories.Keys" +
                    ".Contains(typeof(TSet)))\r\n                    return _repositories[typeof(TSet)]" +
                    " as IViewRepository<TSet, TEnumSp>;\r\n\r\n                var repository = _factory" +
                    ".CreateViewRepository<TSet, TEnumSp>(Context);\r\n                _repositories.Ad" +
                    "d(typeof(TSet), repository);\r\n\r\n                return repository;\r\n            " +
                    "}\r\n\r\n            public IDbTransaction BeginTransaction()\r\n            {\r\n      " +
                    "          if (Transaction != null)\r\n                {\r\n                    throw" +
                    " new NullReferenceException(\"Not finished previous transaction\");\r\n             " +
                    "   }\r\n                Transaction = Context.Connection.BeginTransaction();\r\n    " +
                    "            return Transaction;\r\n            }\r\n\r\n            public void Commit" +
                    "()\r\n            {\r\n                if (Transaction != null)\r\n                {\r\n" +
                    "                    Transaction.Commit();\r\n                    Transaction.Dispo" +
                    "se();\r\n                    Transaction = null;\r\n                }\r\n             " +
                    "   else\r\n                {\r\n                    throw new NullReferenceException" +
                    "(\"Tried commit not opened transaction\");\r\n                }\r\n            }\r\n\r\n  " +
                    "          public void Dispose()\r\n            {\r\n                if (Transaction " +
                    "!= null)\r\n                {\r\n                    Transaction.Dispose();\r\n       " +
                    "         }\r\n                if (Context != null)\r\n                {\r\n           " +
                    "         Context.Dispose();\r\n                }\r\n            }\r\n        }\r\n    }");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class InfrastructureBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
