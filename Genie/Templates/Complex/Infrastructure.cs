// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Genie.Templates.Complex
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class Infrastructure : InfrastructureBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n    namespace Infrastructure\r\n    {\r\n        namespace Enum\r\n        {\r\n       " +
                    "     public enum Condition\r\n            {\r\n                IsNull,\r\n            " +
                    "    IsNotNull,\r\n                Equal,\r\n                NotEqual,\r\n             " +
                    "   Less,\r\n                Greater,\r\n                LessEqual,\r\n                " +
                    "GreaterEqual,\r\n                Between,\r\n                Like,\r\n                " +
                    "In\r\n            }\r\n\r\n            public static class ConditionExtension\r\n       " +
                    "     {\r\n                public static string GetString(this Condition e)\r\n      " +
                    "          {\r\n                    var result = string.Empty;\r\n                   " +
                    " switch (e)\r\n                    {\r\n                        case Condition.IsNul" +
                    "l:\r\n                            return \"IS NULL\";\r\n                        case " +
                    "Condition.IsNotNull:\r\n                            return \"IS NOT NULL\";\r\n       " +
                    "                 case Condition.Equal:\r\n                            return \"=\";\r" +
                    "\n                        case Condition.NotEqual:\r\n                            r" +
                    "eturn \"<>\";\r\n                        case Condition.Less:\r\n                     " +
                    "       return \"<\";\r\n                        case Condition.Greater:\r\n           " +
                    "                 return \">\";\r\n                        case Condition.LessEqual:\r" +
                    "\n                            return \"<=\";\r\n                        case Conditio" +
                    "n.GreaterEqual:\r\n                            return \">=\";\r\n                     " +
                    "   case Condition.Between:\r\n                            return \"BETWEEN\";\r\n     " +
                    "                   case Condition.Like:\r\n                            return \"LIK" +
                    "E\";\r\n                        case Condition.In:\r\n                            ret" +
                    "urn \"IN\";\r\n                        default:\r\n                            throw n" +
                    "ew ArgumentOutOfRangeException(\"e\");\r\n                    }\r\n                }\r\n" +
                    "            }\r\n\r\n            public enum SortAs\r\n            {\r\n                " +
                    "Asc,\r\n                Desc\r\n            }\r\n        }\r\n\r\n        namespace EnumQu" +
                    "eriesStoredProcedures\r\n        {\r\n          ");
            
            #line 70 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var relation in Model.Relations){
          
            
            #line default
            #line hidden
            this.Write("public class ");
            
            #line 71 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Enum : EnumBase<");
            
            #line 71 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Enum, string>\r\n            {\r\n                public ");
            
            #line 73 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Enum(string name, string enumValue, CommandType? cmdType)\r\n                : base" +
                    "(name, enumValue, cmdType)\r\n                    {\r\n                    }\r\n      " +
                    "      }\r\n          ");
            
            #line 78 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            //public class BankEnum : EnumBase<BankEnum, string>\r\n            /" +
                    "/{\r\n                //public static readonly BankEnum GetCustomerByPage = new Ba" +
                    "nkEnum(\"GetCustomerByPage\", \"[dbo].[spCustomerListByPageGet]\", CommandType.Store" +
                    "dProcedure);\r\n//\r\n                //public BankEnum(string Name, string EnumValu" +
                    "e, CommandType? cmdType)\r\n                    //: base(Name, EnumValue, cmdType)" +
                    "\r\n                //{\r\n                //}\r\n            //}\r\n\r\n\r\n\r\n            p" +
                    "ublic sealed class EmptyEnum : EnumBase<EmptyEnum, string>\r\n            {\r\n     " +
                    "           public EmptyEnum(string Name, string EnumValue, CommandType? cmdType)" +
                    "\r\n                    : base(Name, EnumValue, cmdType)\r\n                {\r\n     " +
                    "           }\r\n            }\r\n        }\r\n\r\n        namespace Interfaces\r\n        " +
                    "{\r\n            public interface IDapperContext : IDisposable\r\n            {\r\n   " +
                    "             IDbConnection Connection { get; }\r\n            }\r\n\r\n            pub" +
                    "lic interface IFactoryRepository\r\n            {\r\n                IRepository<T, " +
                    "TRepoSp> CreateRepository<T, TRepoSp>(IDapperContext context)\r\n                 " +
                    "   where T : BaseModel\r\n                    where TRepoSp : EnumBase<TRepoSp, st" +
                    "ring>;\r\n            }\r\n\r\n            public interface IRepository<T, in TRepoQue" +
                    "ry>\r\n              where T : BaseModel\r\n              where TRepoQuery : EnumBas" +
                    "e<TRepoQuery, string>\r\n            {\r\n                IDbConnection Conn { get; " +
                    "}\r\n                IDapperContext Context { get; }\r\n\r\n\r\n                void Add" +
                    "(T entity, IDbTransaction transaction = null, int? commandTimeout = null);\r\n    " +
                    "            void Update(T entity, IDbTransaction transaction = null, int? comman" +
                    "dTimeout = null);\r\n                void Remove(T entity, IDbTransaction transact" +
                    "ion = null, int? commandTimeout = null);\r\n\r\n                T GetByKey(object ke" +
                    "y, IDbTransaction transaction = null, int? commandTimeout = null);\r\n\r\n          " +
                    "      IEnumerable<T> GetAll(IDbTransaction transaction = null, int? commandTimeo" +
                    "ut = null);\r\n                IEnumerable<T> GetBy(object where = null, object or" +
                    "der = null, IDbTransaction transaction = null, int? commandTimeout = null);\r\n\r\n " +
                    "               IEnumerable<TSp> Exec<TSp>(TRepoQuery repoQuery, DynamicParameter" +
                    "s param = null, IDbTransaction transaction = null, int? commandTimeout = null);\r" +
                    "\n                void Exec(TRepoQuery repoQuery, DynamicParameters param = null," +
                    " IDbTransaction transaction = null, int? commandTimeout = null);\r\n            }\r" +
                    "\n\r\n            public interface IUnitOfWork\r\n            {\r\n                IDap" +
                    "perContext Context { get; }\r\n                IDbTransaction Transaction { get; }" +
                    "\r\n                IRepository<TSet, TEnumSp> GetRepository<TSet, TEnumSp>() wher" +
                    "e TSet : BaseModel where TEnumSp : EnumBase<TEnumSp, string>;\r\n                I" +
                    "DbTransaction BeginTransaction();\r\n                void Commit();\r\n            }" +
                    "\r\n        }\r\n\r\n        namespace Repos\r\n        {\r\n            ");
            
            #line 148 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var relation in Model.Relations){
          
            
            #line default
            #line hidden
            this.Write("public class ");
            
            #line 149 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Repository : Repository<");
            
            #line 149 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 149 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Enum>\r\n            {\r\n                public ");
            
            #line 151 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Repository(IDapperContext context) : base(context)\r\n                {\r\n          " +
                    "      }\r\n            }\r\n            ");
            
            #line 155 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write(@"        }

        namespace Models
        {
            internal enum ModelStatus 
            {
                JustInMemory = 1,
                Retrieved = 2,
                Deleted = 3
            }

            public abstract class BaseModel 
            {
                public BaseModel() { UpdatedProperties = new HashSet<string>(); DatabaseModelStatus = ModelStatus.JustInMemory; }
                internal HashSet<string> UpdatedProperties { get; set; }
                internal ModelStatus DatabaseModelStatus { get; set; }
            }

            ");
            
            #line 174 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var relation in Model.Relations){
          
            
            #line default
            #line hidden
            this.Write("[Table(\"[dbo].[");
            
            #line 175 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.RelationName));
            
            #line default
            #line hidden
            this.Write("]\")]\r\n            public partial class ");
            
            #line 176 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write(" : BaseModel\r\n            {\r\n                \r\n                ");
            
            #line 179 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var atd in relation.Attributes){
              
            
            #line default
            #line hidden
            this.Write("private ");
            
            #line 180 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.DataType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 180 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.FieldName));
            
            #line default
            #line hidden
            this.Write(";\r\n                ");
            
            #line 181 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 183 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var atd in relation.Attributes){
            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 184 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
if(atd.IsKey) {
              
            
            #line default
            #line hidden
            this.Write("[Key]\r\n                ");
            
            #line 186 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
              
            
            #line default
            #line hidden
            this.Write("public ");
            
            #line 187 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.DataType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 187 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.Name));
            
            #line default
            #line hidden
            this.Write(" { get { return ");
            
            #line 187 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.FieldName));
            
            #line default
            #line hidden
            this.Write("; } set { ");
            
            #line 187 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.FieldName));
            
            #line default
            #line hidden
            this.Write(" = value; if(DatabaseModelStatus == ModelStatus.Retrieved) { UpdatedProperties.Ad" +
                    "d(\"");
            
            #line 187 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(atd.Name));
            
            #line default
            #line hidden
            this.Write("\"); } } }\r\n                ");
            
            #line 188 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("            }\r\n");
            
            #line 190 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        public class DapperContext : IDapperContext\r\n        {\r\n    " +
                    "        private readonly string _connectionStringName;\r\n            private read" +
                    "only string _connectionString;\r\n            private bool _useMiniProfiler;\r\n    " +
                    "        private IDbConnection _connection;\r\n\r\n            public DapperContext()" +
                    "\r\n            {\r\n                var temp = ConfigurationManager.AppSettings[\"Us" +
                    "eMiniProfilerForSql\"];\r\n                if (!bool.TryParse(temp, out _useMiniPro" +
                    "filer))\r\n                {\r\n                    _useMiniProfiler = false;\r\n     " +
                    "           }\r\n                _connectionStringName = ConfigurationManager.AppSe" +
                    "ttings[\"UsedConnectionString\"];\r\n                _connectionString = Configurati" +
                    "onManager.ConnectionStrings[_connectionStringName].ConnectionString; ;\r\n        " +
                    "    }\r\n\r\n            public IDbConnection Connection\r\n            {\r\n           " +
                    "     get\r\n                {\r\n                    if (_connection == null)\r\n     " +
                    "               {\r\n                        _connection = new SqlConnection(_conne" +
                    "ctionString);\r\n                    }\r\n                    if (_connection.State " +
                    "!= ConnectionState.Open)\r\n                    {\r\n                        _connec" +
                    "tion.Open();\r\n                    }\r\n                    return _connection;\r\n  " +
                    "              }\r\n            }\r\n            public void Dispose()\r\n            {" +
                    "\r\n                if (_connection != null && _connection.State == ConnectionStat" +
                    "e.Open)\r\n                    _connection.Close();\r\n            }\r\n        }\r\n\r\n " +
                    "       public class FactoryRepository : IFactoryRepository\r\n        {\r\n         " +
                    "   public IRepository<T, TEnumSp> CreateRepository<T, TEnumSp>(IDapperContext co" +
                    "ntext) where T : BaseModel where TEnumSp : EnumBase<TEnumSp, string>\r\n          " +
                    "  {\r\n                IRepository<T, TEnumSp> repository;\r\n                //if (" +
                    "typeof(T) == typeof(<Some type>))\r\n                //{\r\n                //    re" +
                    "pository = (IRepository<T, TEnumSp>)new <SomeRepository>(context);\r\n            " +
                    "    //}\r\n                //else\r\n                {\r\n                    reposito" +
                    "ry = new Repository<T, TEnumSp>(context);\r\n                }\r\n                re" +
                    "turn repository;\r\n            }\r\n\r\n        }\r\n\r\n        public class Repository<" +
                    "T, TRepoQuery> : IRepository<T, TRepoQuery>\r\n               where T : BaseModel\r" +
                    "\n               where TRepoQuery : EnumBase<TRepoQuery, string>\r\n        {\r\n    " +
                    "        public IDbConnection Conn { get; private set; }\r\n            public IDap" +
                    "perContext Context { get; private set; }\r\n\r\n            public Repository(IDappe" +
                    "rContext context)\r\n            {\r\n                Context = context;\r\n          " +
                    "      Conn = Context.Connection;\r\n            }\r\n\r\n            public virtual vo" +
                    "id Add(T entity, IDbTransaction transaction = null, int? commandTimeout = null)\r" +
                    "\n            {\r\n                if (entity == null)\r\n                {\r\n        " +
                    "            throw new ArgumentNullException(\"entity\", \"Add to DB null entity\");\r" +
                    "\n                }\r\n                var res = Conn.Insert(entity, transaction: t" +
                    "ransaction, commandTimeout: commandTimeout);\r\n            }\r\n\r\n            publi" +
                    "c virtual void Update(T entity, IDbTransaction transaction = null, int? commandT" +
                    "imeout = null)\r\n            {\r\n                if (entity == null)\r\n            " +
                    "    {\r\n                    throw new ArgumentNullException(\"entity\", \"Update in " +
                    "DB null entity\");\r\n                }\r\n                Conn.Update(entity, transa" +
                    "ction: transaction, commandTimeout: commandTimeout);\r\n            }\r\n\r\n         " +
                    "   public virtual void Remove(T entity, IDbTransaction transaction = null, int? " +
                    "commandTimeout = null)\r\n            {\r\n                if (entity == null)\r\n    " +
                    "            {\r\n                    throw new ArgumentNullException(\"entity\", \"Re" +
                    "move in DB null entity\");\r\n                }\r\n                Conn.Delete(entity" +
                    ", transaction: transaction, commandTimeout: commandTimeout);\r\n            }\r\n\r\n " +
                    "           public virtual T GetByKey(object id, IDbTransaction transaction = nul" +
                    "l, int? commandTimeout = null)\r\n            {\r\n                if (id == null)\r\n" +
                    "                {\r\n                    throw new ArgumentNullException(\"id\");\r\n " +
                    "               }\r\n                var item = Conn.Get<T>(id, transaction: transa" +
                    "ction, commandTimeout: commandTimeout);\r\n                item.DatabaseModelStatu" +
                    "s = ModelStatus.Retrieved;\r\n                return item;\r\n            }\r\n\r\n     " +
                    "       public virtual IEnumerable<T> GetAll(IDbTransaction transaction = null, i" +
                    "nt? commandTimeout = null)\r\n            {\r\n                var items = Conn.GetA" +
                    "ll<T>(transaction: transaction, commandTimeout: commandTimeout).ToList();\r\n\r\n   " +
                    "             foreach (var item in items)\r\n                    item.DatabaseModel" +
                    "Status = ModelStatus.Retrieved;\r\n                return items;\r\n            }\r\n\r" +
                    "\n            public virtual IEnumerable<T> GetBy(object where = null, object ord" +
                    "er = null, IDbTransaction transaction = null, int? commandTimeout = null)\r\n     " +
                    "       {\r\n                var items = Conn.GetBy<T>(where: where, order: order, " +
                    "transaction: transaction, commandTimeout: commandTimeout).ToList();\r\n\r\n         " +
                    "       foreach (var item in items)\r\n                    item.DatabaseModelStatus" +
                    " = ModelStatus.Retrieved;\r\n                return items;\r\n            }\r\n\r\n     " +
                    "       public IEnumerable<TSp> Exec<TSp>(TRepoQuery repoQuery, DynamicParameters" +
                    " param = null, IDbTransaction transaction = null,\r\n                             " +
                    "                     int? commandTimeout = null)\r\n            {\r\n               " +
                    " return Conn.Query<TSp>(repoQuery.Value, param, commandType: repoQuery.CmdType, " +
                    "transaction: transaction, commandTimeout: commandTimeout);\r\n            }\r\n\r\n   " +
                    "         public void Exec(TRepoQuery repoQuery, DynamicParameters param = null, " +
                    "IDbTransaction transaction = null,\r\n                                      int? c" +
                    "ommandTimeout = null)\r\n            {\r\n                Conn.Execute(repoQuery.Val" +
                    "ue, param, commandType: repoQuery.CmdType, transaction: transaction, commandTime" +
                    "out: commandTimeout);\r\n            }\r\n        }\r\n\r\n        public class UnitOfWo" +
                    "rk : IUnitOfWork, IDisposable\r\n        {\r\n            private readonly Dictionar" +
                    "y<Type, object> _repositories;\r\n            private readonly IFactoryRepository " +
                    "_factory;\r\n\r\n            public IDapperContext Context { get;}\r\n            publ" +
                    "ic IDbTransaction Transaction { get; private set; }\r\n\r\n            public UnitOf" +
                    "Work(IDapperContext context, IFactoryRepository factory)\r\n            {\r\n       " +
                    "         Context = context;\r\n                _factory = factory;\r\n              " +
                    "  _repositories = new Dictionary<Type, object>();\r\n            }\r\n            \r\n" +
                    "            ");
            
            #line 348 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
foreach(var relation in Model.Relations){
          
            
            #line default
            #line hidden
            this.Write("public IRepository<");
            
            #line 349 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 349 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Enum> ");
            
            #line 349 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Repository { get { return GetRepository<");
            
            #line 349 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 349 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.Name));
            
            #line default
            #line hidden
            this.Write("Enum>(); } }\r\n            ");
            
            #line 350 "D:\Projects\Genie\Genie\Templates\Complex\Infrastructure.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            public IRepository<TSet, TEnumSp> GetRepository<TSet, TEnumSp>() wh" +
                    "ere TSet : BaseModel where TEnumSp : EnumBase<TEnumSp, string>\r\n            {\r\n " +
                    "               if (_repositories.Keys.Contains(typeof(TSet)))\r\n                 " +
                    "   return _repositories[typeof(TSet)] as IRepository<TSet, TEnumSp>;\r\n\r\n        " +
                    "        var repository = _factory.CreateRepository<TSet, TEnumSp>(Context);\r\n   " +
                    "             _repositories.Add(typeof(TSet), repository);\r\n\r\n                ret" +
                    "urn repository;\r\n            }\r\n\r\n            public IDbTransaction BeginTransac" +
                    "tion()\r\n            {\r\n                if (Transaction != null)\r\n               " +
                    " {\r\n                    throw new NullReferenceException(\"Not finished previous " +
                    "transaction\");\r\n                }\r\n                Transaction = Context.Connect" +
                    "ion.BeginTransaction();\r\n                return Transaction;\r\n            }\r\n\r\n " +
                    "           public void Commit()\r\n            {\r\n                if (Transaction " +
                    "!= null)\r\n                {\r\n                    Transaction.Commit();\r\n        " +
                    "            Transaction.Dispose();\r\n                    Transaction = null;\r\n   " +
                    "             }\r\n                else\r\n                {\r\n                    thr" +
                    "ow new NullReferenceException(\"Tried commit not opened transaction\");\r\n         " +
                    "       }\r\n            }\r\n\r\n            public void Dispose()\r\n            {\r\n   " +
                    "             if (Transaction != null)\r\n                {\r\n                    Tr" +
                    "ansaction.Dispose();\r\n                }\r\n                if (Context != null)\r\n " +
                    "               {\r\n                    Context.Dispose();\r\n                }\r\n   " +
                    "         }\r\n        }\r\n    }");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class InfrastructureBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
